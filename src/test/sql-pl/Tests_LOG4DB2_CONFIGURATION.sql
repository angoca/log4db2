--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the configuration table.
 *
 * Version: 2014-04-21 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOG4DB2_CONFIGURATION @

BEGIN
 DECLARE STATEMENT VARCHAR(128);
 DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' BEGIN END;
 SET STATEMENT = 'CREATE SCHEMA LOG4DB2_CONFIGURATION';
 EXECUTE IMMEDIATE STATEMENT;
END @

-- Test fixtures
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 P_ONE_TIME_SETUP: BEGIN
  -- Empty
 END P_ONE_TIME_SETUP @

CREATE OR REPLACE PROCEDURE SETUP()
 P_SETUP: BEGIN
  DELETE FROM LOGDATA.CONFIGURATION;
 END P_SETUP @

CREATE OR REPLACE PROCEDURE TEAR_DOWN()
 P_TEAR_DOWN: BEGIN
  -- Empty
 END P_TEAR_DOWN @

CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 P_ONE_TIME_TEAR_DOWN: BEGIN
  CALL LOGGER_1RC.LOGADMIN.RESET_TABLES();
 END P_ONE_TIME_TEAR_DOWN @

-- Tests
-- Test01: Inserts a normal key/value.
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE ACTUAL_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE ACTUAL_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE EXPECTED_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE EXPECTED_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;

  SET EXPECTED_KEY = 'test1';
  SET EXPECTED_VALUE = 'val1';
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
    VALUES (EXPECTED_KEY, EXPECTED_VALUE);
  SELECT KEY, VALUE INTO ACTUAL_KEY, ACTUAL_VALUE
    FROM LOGDATA.CONFIGURATION;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test01: Inserts a normal key/value',
    EXPECTED_KEY, ACTUAL_KEY);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test01: Inserts a normal key/value',
    EXPECTED_VALUE, ACTUAL_VALUE);
 END@

-- Test02: Inserts a key/value with null key.
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE VAR_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE VAR_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
    SET RAISED_407 = TRUE;

  SET VAR_KEY = NULL;
  SET VAR_VALUE = 'val2';
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE) VALUES (VAR_KEY, VAR_VALUE);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test02: Inserts a key/value with null key',
    RAISED_407);
 END@

-- Test03: Inserts a key/value with null value.
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE ACTUAL_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE ACTUAL_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE EXPECTED_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE EXPECTED_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;

  SET EXPECTED_KEY = 'test3';
  SET EXPECTED_VALUE = NULL;
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
    VALUES (EXPECTED_KEY, EXPECTED_VALUE);
  SELECT KEY, VALUE INTO ACTUAL_KEY, ACTUAL_VALUE
    FROM LOGDATA.CONFIGURATION;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test03: Inserts a null value',
    EXPECTED_KEY, ACTUAL_KEY);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test03: Inserts a null value',
    EXPECTED_VALUE, ACTUAL_VALUE);
 END@

-- Test04: Inserts a key/value with all null.
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE VAR_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE VAR_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
    SET RAISED_407 = TRUE;

  SET VAR_KEY = NULL;
  SET VAR_VALUE = NULL;
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE) VALUES (VAR_KEY, VAR_VALUE);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test04: Inserts a key/value with all null',
    RAISED_407);
 END@

-- Test05: Inserts a duplicated key/value.
CREATE OR REPLACE PROCEDURE TEST_05()
 BEGIN
  DECLARE VAR_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE VAR_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE RAISED_803 BOOLEAN DEFAULT FALSE; -- Duplicated key.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23505'
    SET RAISED_803 = TRUE;

  SET VAR_KEY = 'test5';
  SET VAR_VALUE = 'val5';
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE) VALUES (VAR_KEY, VAR_VALUE);
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE) VALUES (VAR_KEY, VAR_VALUE);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test05: Inserts a duplicated key/value',
    RAISED_803);
 END@

-- Test06: Updates to a normal key/value.
CREATE OR REPLACE PROCEDURE TEST_06()
 BEGIN
  DECLARE ACTUAL_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE ACTUAL_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE EXPECTED_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE EXPECTED_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;

  SET EXPECTED_KEY = 'test6';
  SET EXPECTED_VALUE = 'val6u';
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE) VALUES (EXPECTED_KEY, 'val6');
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = EXPECTED_VALUE
    WHERE KEY = EXPECTED_KEY;
  SELECT KEY, VALUE INTO ACTUAL_KEY, ACTUAL_VALUE
    FROM LOGDATA.CONFIGURATION;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test06: Updates to a normal key/value',
    EXPECTED_KEY, ACTUAL_KEY);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test06: Updates to a normal key/value',
    EXPECTED_VALUE, ACTUAL_VALUE);
 END@

-- Test07: Updates to a normal key/value to null value.
CREATE OR REPLACE PROCEDURE TEST_07()
 BEGIN
  DECLARE ACTUAL_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE ACTUAL_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE EXPECTED_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE EXPECTED_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;

  SET EXPECTED_KEY = 'test7';
  SET EXPECTED_VALUE = NULL;
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE) VALUES (EXPECTED_KEY, 'val7');
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = EXPECTED_VALUE
    WHERE KEY = EXPECTED_KEY;
  SELECT KEY, VALUE INTO ACTUAL_KEY, ACTUAL_VALUE
    FROM LOGDATA.CONFIGURATION;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test07: Updates to null value',
    EXPECTED_KEY, ACTUAL_KEY);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test07: Updates to null value',
    EXPECTED_VALUE, ACTUAL_VALUE);
 END@

-- Test08: Updates to a normal key/value to null key.
CREATE OR REPLACE PROCEDURE TEST_08()
 BEGIN
  DECLARE VAR_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE VAR_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
    SET RAISED_407 = TRUE;

  SET VAR_KEY = NULL;
  SET VAR_VALUE = 'val8';
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE) VALUES ('key8', VAR_VALUE);
  UPDATE LOGDATA.CONFIGURATION
    SET KEY = VAR_KEY
    WHERE VALUE = VAR_VALUE;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test08: Updates to null key',
    RAISED_407);
 END@

-- Test09: Updates to a duplicated key/value.
CREATE OR REPLACE PROCEDURE TEST_09()
 BEGIN
  DECLARE VAR_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE VAR_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE RAISED_803 BOOLEAN DEFAULT FALSE; -- Duplicated key.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23505'
    SET RAISED_803 = TRUE;

  SET VAR_KEY = 'test9b';
  SET VAR_VALUE = 'val9';
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE) VALUES ('test9a', VAR_VALUE);
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE) VALUES (VAR_KEY, VAR_VALUE);
  UPDATE LOGDATA.CONFIGURATION
    SET KEY = VAR_KEY
    WHERE KEY = 'test9a';

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test09: Updates to a duplicated key/value',
    RAISED_803);
 END@

-- Test10: Deletes a key/value.
CREATE OR REPLACE PROCEDURE TEST_10()
 BEGIN
  DECLARE ACTUAL_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE ACTUAL_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE KY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE VAL ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE EXPECTED_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE EXPECTED_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;

  SET EXPECTED_KEY = NULL;
  SET EXPECTED_VALUE = NULL;
  SET KY = 'test10';
  SET VAL = 'val10';
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
    VALUES (KY, VAL);
  DELETE FROM LOGDATA.CONFIGURATION
    WHERE KEY = KY;
  SELECT KEY, VALUE INTO ACTUAL_KEY, ACTUAL_VALUE
    FROM LOGDATA.CONFIGURATION
    WHERE ;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test10: Deletes a key/value',
    EXPECTED_KEY, ACTUAL_KEY);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test10: Deletes a key/value',
    EXPECTED_VALUE, ACTUAL_VALUE);
 END@

-- Test11: Deletes all.
CREATE OR REPLACE PROCEDURE TEST_11()
 BEGIN
  DECLARE ACTUAL_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE ACTUAL_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE KY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE VAL ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.KEY;
  DECLARE EXPECTED_KEY ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;
  DECLARE EXPECTED_VALUE ANCHOR DATA TYPE TO LOGDATA.CONFIGURATION.VALUE;

  SET EXPECTED_KEY = NULL;
  SET EXPECTED_VALUE = NULL;
  SET KY = 'test11';
  SET VAL = 'val11';
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
    VALUES (KY, VAL);
  DELETE FROM LOGDATA.CONFIGURATION;
  SELECT KEY, VALUE INTO ACTUAL_KEY, ACTUAL_VALUE
    FROM LOGDATA.CONFIGURATION;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test11: Deletes all',
    EXPECTED_KEY, ACTUAL_KEY);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test11: Deletes all',
    EXPECTED_VALUE, ACTUAL_VALUE);
 END@

-- Test12: Tests invalid defaultRootLevelId insert
CREATE OR REPLACE PROCEDURE TEST_12()
 BEGIN
  DECLARE RAISED_LG0T1 BOOLEAN DEFAULT FALSE; -- For a controlled error.
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0T1'
    SET RAISED_LG0T1 = TRUE;

  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
    VALUES ('defaultRootLevelId', 'qwerty');

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test12: Ivalid defaultRootLevelId insert',
    RAISED_LG0T1);
 END@

-- Test13: Tests invalid defaultRootLevelId update
CREATE OR REPLACE PROCEDURE TEST_13()
 BEGIN
  DECLARE RAISED_LG0T1 BOOLEAN DEFAULT FALSE; -- For a controlled error.
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0T1'
    SET RAISED_LG0T1 = TRUE;

  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
    VALUES ('defaultRootLevelId', '3');
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'qwerty'
    WHERE KEY = 'defaultRootLevelId';

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test13: Invalid defaultRootLevelId update',
    RAISED_LG0T1);
 END@

-- Register the suite.
CALL DB2UNIT.REGISTER_SUITE(CURRENT SCHEMA) @

