--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the conf loggers effective table.
 *
 * Version: 2014-04-21 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOGGER_1RC @

SET PATH = "SYSIBM", "SYSFUN", "SYSPROC", "SYSIBMADM", LOGGER_1RC @

CREATE OR REPLACE FUNCTION GET_MAX_ID()
  RETURNS ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
 BEGIN
  DECLARE RET ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  SET RET = (SELECT MAX(LOGGER_ID)
    FROM LOGDATA.CONF_LOGGERS);
  RETURN RET;
 END @

CREATE OR REPLACE PROCEDURE DELETE_LAST_MESSAGE_FROM_TRIGGER()
 BEGIN
  DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE = 'A manual CONF_LOGGERS_EFFECTIVE update should be realized.'
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
 END @

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '00000';

DECLARE RAISED_LG0E1 BOOLEAN DEFAULT FALSE; -- Logger without parent.
DECLARE RAISED_LG0E2 BOOLEAN DEFAULT FALSE; -- Modifying values.
DECLARE RAISED_LGAE3 BOOLEAN DEFAULT FALSE; -- Modifying level_id.
DECLARE RAISED_LGBE3 BOOLEAN DEFAULT FALSE; -- Modifying level_id.
DECLARE RAISED_LG0E4 BOOLEAN DEFAULT FALSE; -- ROOT logger should always exist.
DECLARE RAISED_LG0E5 BOOLEAN DEFAULT FALSE; -- Just one ROOT.
DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
DECLARE RAISED_530 BOOLEAN DEFAULT FALSE; -- Foreign key.
DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
DECLARE ACTUAL_QTY SMALLINT;
DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
DECLARE EXPECTED_QTY SMALLINT;
DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
DECLARE STRING VARCHAR(32);
DECLARE ACTUAL_PATH VARCHAR(64);
DECLARE EXPECTED_PATH VARCHAR(64);
DECLARE EXPECTED_MSG ANCHOR LOGDATA.LOGS.MESSAGE;
DECLARE ACTUAL_MSG ANCHOR LOGDATA.LOGS.MESSAGE;

-- Controlled SQL State.
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E1'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E1 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E2'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E2 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LGAE3'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (1, 'SQLState ' || SQLSTATE);
   SET RAISED_LGAE3 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LGBE3'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (1, 'SQLState ' || SQLSTATE);
   SET RAISED_LGBE3 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E4'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E4 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E5'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (1, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E5 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE '23503'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_530 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_407 = TRUE;
  END;

-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLoggersEffective: Preparing environment');
SET RAISED_LG0E1 = FALSE;
SET RAISED_LG0E2 = FALSE;
SET RAISED_LGAE3 = FALSE;
SET RAISED_LGBE3 = FALSE;
SET RAISED_LG0E4 = FALSE;
SET RAISED_LG0E5 = FALSE;
SET RAISED_530 = FALSE;
SET RAISED_407 = FALSE;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '3'
  WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'internalCache';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'logInternals';
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
COMMIT;

-- Test01: Test update Conf_loggers 1. Root update 1 -> 2
-- CL   CLE   CL  CLE
--  0 1  0 1   0 2  0 2
--  |    |     |    |
--  o    0 1   o    0 2
--  |    |     |    |
--  o    0 1   o    0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test01: Test update Conf_loggers 1. Root update 1 -> 2');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 1;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = 2;
SET EXPECTED_ROOT = 2;
SET EXPECTED_PARENT = 2;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test01p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test01s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test02: Test update Conf_loggers 2. Root update 2 -> 5
-- CL   CLE   CL  CLE
--  0 2  0 2   0 5  0 5
--  |    |     |    |
--  o    0 2   o    0 5
--  |    |     |    |
--  0 4  0 4   0 4  0 4
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test02: Test update Conf_loggers 2. Root update 2 -> 5');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 2;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = 4;
SET EXPECTED_LEVEL = 5;
SET EXPECTED_ROOT = 5;
SET EXPECTED_PARENT = 5;
SET EXPECTED_SON = 4;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test02p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test02s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test03: Test update Conf_loggers 3. Parent update 1 -> 4
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   0 4  0 4
--  |    |     |    |
--  o    0 1   o    0 4
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test03: Test update Conf_loggers 3. Parent update 1 -> 4');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = 1;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = 4;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 4;
SET EXPECTED_SON = 4;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test03p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test03s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = PARENT;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test04: Test update Conf_loggers 4. Son update 2 -> 4
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   0 1  0 1
--  |    |     |    |
--  0 2  0 2   0 4  0 4
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test04: Test update Conf_loggers 4. Son update 2 -> 4');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = 1;
SET INITIAL_SON = 2;
SET EXPECTED_LEVEL = 4;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 1;
SET EXPECTED_SON = 4;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test04p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test04s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = SON_ID;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test05: Test update Conf_loggers 5. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test05: Test update Conf_loggers 5. Root update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 1;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 3;
SET EXPECTED_SON = 3;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test05p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test05s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test06: Test update Conf_loggers 6. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
--  |    |     |    |
--  o    0 2   o    0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test06: Test update Conf_loggers 6. Root update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 1;
SET INITIAL_PARENT = 2;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 2;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test06p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test06s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test07: Test update Conf_loggers 7. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
--  |    |     |    |
--  0 4  0 4   0 4  0 4
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test07: Test update Conf_loggers 7. Root update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 1;
SET INITIAL_PARENT = 2;
SET INITIAL_SON = 4;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 2;
SET EXPECTED_SON = 4;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test07p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test07s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test08: Test update Conf_loggers 8. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test08: Test update Conf_loggers 8. Root update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 1;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = 2;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 3;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test08p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test08s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test09: Test update Conf_loggers 9. Parent update 1 -> NULL
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test09: Test update Conf_loggers 9. Parent update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = 1;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 3;
SET EXPECTED_SON = 3;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test09p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test09s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = PARENT;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test10: Test update Conf_loggers 10. Parent update 1 -> NULL
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test10: Test update Conf_loggers 10. Parent update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = 1;
SET INITIAL_SON = 2;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 3;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test10p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test10s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = PARENT;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test11: Test update Conf_loggers 11. Parent update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  o    0 3   0 1  0 1
--  |    |     |    |
--  o    0 3   o    0 1
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test11: Test update Conf_loggers 11. Parent update NULL -> 1');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 1;
SET EXPECTED_SON = 1;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test11p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test11s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = PARENT;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test12: Test update Conf_loggers 12. Parent update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  o    0 3   0 1  0 1
--  |    |     |    |
--  0 2  0 2   0 2  0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test12: Test update Conf_loggers 12. Parent update NULL -> 1');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = 2;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 1;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test12p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test12s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = PARENT;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test13: Test update Conf_loggers 13. ROOT update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   0 1  0 1
--  |    |     |    |
--  o    0 3   o    0 1
--  |    |     |    |
--  o    0 3   o    0 1
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test13: Test update Conf_loggers 13. ROOT update NULL -> 1');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_ROOT = 1;
SET EXPECTED_PARENT = 1;
SET EXPECTED_SON = 1;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test13p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test13s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test14: Test update Conf_loggers 14. ROOT update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   0 1  0 1
--  |    |     |    |
--  0 2  0 2   0 2  0 2
--  |    |     |    |
--  o    0 2   o    0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test14: Test update Conf_loggers 14. ROOT update NULL -> 1');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = 2;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_ROOT = 1;
SET EXPECTED_PARENT = 2;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test14p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test14s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test15: Test update Conf_loggers 15. ROOT update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   0 1  0 1
--  |    |     |    |
--  o    0 3   o    0 1
--  |    |     |    |
--  0 2  0 2   0 2  0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test15: Test update Conf_loggers 15. ROOT update NULL -> 1');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = 2;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_ROOT = 1;
SET EXPECTED_PARENT = 1;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test15p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test15s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test16: Test update Conf_loggers 16. Default update.
-- CL   CLE   CL   CLE
--  o    0 3   o    0 2
--  |    |     |    |
--  o    0 3   o    0 2
--  |    |     |    |
--  o    0 3   o    0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test16: Test update Conf_loggers 16. Default update');
SET EXPECTED_MSG = 'A manual CONF_LOGGERS_EFFECTIVE update should be realized.';
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = NULL;
SET EXPECTED_ROOT = 2;
SET EXPECTED_PARENT = 2;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test16p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test16s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONFIGURATION SET VALUE = '2' WHERE KEY = 'defaultRootLevelId';
SELECT MESSAGE INTO ACTUAL_MSG
  FROM LOGS
  WHERE DATE = (SELECT MAX(DATE)
    FROM LOGS);
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES 
   (2, 'Different msg');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES 
   (2, 'Expected "' || COALESCE(EXPECTED_MSG, '-') || '" actual "' || COALESCE(ACTUAL_MSG, '-') || '"');
END IF;
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE = EXPECTED_MSG
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
-- The following does not work, because the trigger cannot update Effective.
--SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
--IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
-- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
-- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
--END IF;
--SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
--IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
-- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
-- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
--END IF;
--SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
--IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
-- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
-- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
--END IF;
COMMIT;

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLoggersEffective: Cleaning environment');
DELETE FROM LOGDATA.CONFIGURATION;
INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
  VALUES ('autonomousLogging', 'true'),
         ('defaultRootLevelId', '3'),
         ('internalCache', 'true'),
         ('logInternals', 'false'),
         ('secondsToRefresh', '30');
CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLoggersEffective: Finished succesfully');
COMMIT;

END @

DROP PROCEDURE DELETE_LAST_MESSAGE_FROM_TRIGGER() @

DROP FUNCTION GET_MAX_ID @

--SELECT LOGGER_ID, PARENT_ID, VARCHAR(NAME, 32) NAME, LEVEL_ID
--  FROM LOGDATA.CONF_LOGGERS
--  ORDER BY LOGGER_ID @

--SELECT LOGGER_ID, LEVEL_ID, HIERARCHY
--  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
--  ORDER BY LOGGER_ID @

