--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests different names for loggers.
 *
 * Version: 2022-06-07 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOG4DB2_GET_LOGGER @

BEGIN
 DECLARE STATEMENT VARCHAR(128);
 DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' BEGIN END;
 SET STATEMENT = 'CREATE SCHEMA LOG4DB2_GET_LOGGER';
 EXECUTE IMMEDIATE STATEMENT;
END @

SET PATH = SYSPROC, LOG4DB2_GET_LOGGER @

-- Install

CREATE OR REPLACE FUNCTION GET_MAX_ID(
  ) RETURNS ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
 BEGIN
  DECLARE RET ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  SET RET = (SELECT MAX(LOGGER_ID)
    FROM LOGDATA.CONF_LOGGERS);
  RETURN RET;
 END@

-- Test fixtures
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 BEGIN
  CALL DB2UNIT.SET_AUTONOMOUS(FALSE);
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'false'
    WHERE KEY = 'internalCache';
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'false'
    WHERE KEY = 'logInternals';
  CALL LOGGER.REFRESH_CACHE();
 END @

CREATE OR REPLACE PROCEDURE SETUP()
 BEGIN
  -- Empty
 END @

CREATE OR REPLACE PROCEDURE TEAR_DOWN()
 BEGIN
  -- Empty
 END @

CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 BEGIN
  CALL LOGGER_1RC.LOGADMIN.RESET_TABLES();
  CALL LOGGER.REFRESH_CACHE ();
 END @

-- Tests

-- Test01: empty string.
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = '';
  SET EXPECTED_ID = 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test01: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test02: a whitespace.
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = ' ';
  SET EXPECTED_ID = 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test02: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test03: a dot.
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = '.';
  SET EXPECTED_ID = 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test03: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test04: two dots.
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = '..';
  SET EXPECTED_ID = 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test04: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test05: a letter.
CREATE OR REPLACE PROCEDURE TEST_05()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = 'a';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T5', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test05: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test06: a letter followed by a dot.
CREATE OR REPLACE PROCEDURE TEST_06()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = 'b.';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T6', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test06: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test07: two valid levels.
CREATE OR REPLACE PROCEDURE TEST_07()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = 'c.c';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T7', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 2;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test07: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test08: a dot preceded by a dot.
CREATE OR REPLACE PROCEDURE TEST_08()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = '.d';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T8', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test08: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test09: a letter surrrounded by dots.
CREATE OR REPLACE PROCEDURE TEST_09()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = '.e.';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T9', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test09: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test10: three valid levels.
CREATE OR REPLACE PROCEDURE TEST_10()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = 'f.g.h';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T10', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 3;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test10: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test11: three valid levels (multiple letters).
CREATE OR REPLACE PROCEDURE TEST_11()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = 'ii.jj.kk';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T11', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 3;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test11: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test12: a multi letter level.
CREATE OR REPLACE PROCEDURE TEST_12()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = 'lll';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T12', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test12: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test13: two multi letters levels.
CREATE OR REPLACE PROCEDURE TEST_13()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = 'mm.nn';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T13', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 2;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test13: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test14: three multi letters levels.
CREATE OR REPLACE PROCEDURE TEST_14()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = '111.222.333';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T14', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 3;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test14: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test15: a letter surrrounded by spaces.
CREATE OR REPLACE PROCEDURE TEST_15()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = ' p ';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T15', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test15: >' || STRING || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test16: a null string.
CREATE OR REPLACE PROCEDURE TEST_16()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = NULL;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T16', 0, 0);
  SET EXPECTED_ID = 0;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test16: >' || COALESCE(STRING, 'NULL') || '<',
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Test17: Before limit.
CREATE OR REPLACE PROCEDURE TEST_17()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = '1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.7.8.9.0';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T17', 0, 0);
  SET EXPECTED_ID = GET_MAX_ID() + 30;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS(SUBSTR('Test17: Before limit >' || STRING
    || '<', 64), EXPECTED_ID, ACTUAL_ID);
 END @

-- Test18: Limit.
CREATE OR REPLACE PROCEDURE TEST_18()
 BEGIN
  DECLARE STRING ANCHOR LOGGER.COMPLETE_LOGGER_NAME;
  DECLARE EXPECTED_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET STRING = '1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.7.8.9.0.1';
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T18', 0, 0);
  SET EXPECTED_ID = 0;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  CALL LOGGER.GET_LOGGER(STRING, ACTUAL_ID);

  CALL DB2UNIT.ASSERT_INT_EQUALS(SUBSTR('Test18: Limit >' || STRING || '<', 64),
    EXPECTED_ID, ACTUAL_ID);
 END @

-- Register the suite.
CALL DB2UNIT.REGISTER_SUITE(CURRENT SCHEMA) @

