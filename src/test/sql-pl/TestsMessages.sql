--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the appenders table.
 */

SET CURRENT SCHEMA LOGGER_1B @

SET PATH = SYSPROC, LOGGER_1B @

CREATE OR REPLACE PROCEDURE CASCADE (
  IN VAL INTEGER
  )
 BEGIN
  DECLARE STMT STATEMENT;
  CALL LOGGER.LOG(0, 5, 'Values: ' || VAL);
  PREPARE STMT FROM 'CALL CASCADE(?)';
  EXECUTE STMT USING VAL + 1;
 END @

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '00000';

DECLARE RAISED_LG0C1 BOOLEAN DEFAULT FALSE; -- For a controlled error.
DECLARE EXPECTED_MSG VARCHAR(1000);
DECLARE ACTUAL_MSG VARCHAR(1000) DEFAULT ' ';
DECLARE VALUE ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  GET DIAGNOSTICS EXCEPTION 1 ACTUAL_MSG = DB2_TOKEN_STRING;
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'TestsMessages: Preparing environment');
COMMIT;

-- Test01: Tests message LG0L1.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test01: Tests message LG0L1');
SET EXPECTED_MSG = 'LEVEL_ID should be equal or greater than zero';
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (-1, 'NAME');
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test02: Tests message LG0L2.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test02: Tests message LG0L2');
SET EXPECTED_MSG = 'LEVEL_ID should be consecutive to the previous maximal value';
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (10, 'NAME');
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test03: Tests message LG0L3.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test03: Tests message LG0L3');
SET EXPECTED_MSG = 'It is not possible to change the LEVEL_ID';
UPDATE LOGDATA.LEVELS
  SET LEVEL_ID = 0
  WHERE LEVEL_ID = 1;
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test04: Tests message LG0L4.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test04: Tests message LG0L4');
SET EXPECTED_MSG = 'Trying to delete the minimal value';
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID = 0;
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test05: Tests message LG0L5.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test05: Tests message LG0L5');
SET EXPECTED_MSG = 'The only possible LEVEL_ID to delete is the maximal value';
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID = 1;
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test06: Tests message LG0C1.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test06: Tests message LG0C1');
SET EXPECTED_MSG = 'ROOT cannot be inserted';
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (0, 'ROOT', NULL, 3);
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test07: Tests message LG0C2.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test07: Tests message LG0C2');
SET EXPECTED_MSG = 'The only logger without parent is ROOT';
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (1, 'test7', NULL, 0);
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test08: Tests message LG0C3.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test08: Tests message LG0C3');
SET EXPECTED_MSG = 'LOGGER_ID cannot be negative';
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (-1, 'test8', 0, 5);
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test09: Tests message LG0C4.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test09: Tests message LG0C4');
SET EXPECTED_MSG = 'The LEVEL_ID is the only column that can be updated';
UPDATE LOGDATA.CONF_LOGGERS
  SET NAME = 'Test9'
  WHERE LOGGER_ID = 0; 
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test10: Tests message LG0E1.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test10: Tests message LG0E1');
SET EXPECTED_MSG = 'The LEVEL_ID is the only column that can be updated';
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET HIERARCHY = ''
  WHERE LOGGER_ID = 0;
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test11: Tests message LG0E2.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test11: Tests message LG0E2');
SET EXPECTED_MSG = 'ROOT logger cannot be deleted';
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID = 0;
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test12: Tests message LG0A1.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test12: Tests message LG0A1');
SET EXPECTED_MSG = 'APPENDER_ID for appenders should be greater or equal to zero';
INSERT INTO LOGDATA.APPENDERS (APPENDER_ID, NAME) VALUES
  (-1, 'test12');
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test13: Tests message LG0T1.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test13: Tests message LG0T1');
SET EXPECTED_MSG = 'Invalid value for defaultRootLevelId';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'qwerty'
  WHERE KEY = 'defaultRootLevelId';
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test14: Tests message LG0F1.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test14: Tests message LG0F1');
SET EXPECTED_MSG = 'Invalid given parameter: SON_ID';
SET VALUE = LOGGER.GET_DEFINED_PARENT_LOGGER(NULL);
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test15: Tests message LG0P1.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test15: Tests message LG0P1');
SET EXPECTED_MSG = 'Invalid given parameter: PARENT or LEVEL';
CALL LOGGER.MODIFY_DESCENDANTS (NULL, NULL);
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Test16: Tests message LG001.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test16: Tests message LG001');
SET EXPECTED_MSG = 'Cascade call limit achieved. Log message was written';
CALL CASCADE(0);
DELETE FROM LOGS
  WHERE DATE = (SELECT MAX(DATE)
   FROM LOGS)
  AND MESSAGE LIKE 'LG001%';
IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different MESSAGE_TEXT"');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2,  EXPECTED_MSG || '" - "' || ACTUAL_MSG || '"');
END IF;
COMMIT;

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsMessages: Cleaning environment');
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsMessages: Finished succesfully');
COMMIT;

END @

DROP PROCEDURE CASCADE @

