--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the implementation of the appenders.
 *
 * Version: 2014-04-21 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOG4DB2_APPENDERS_IMPLEMENTATION @

BEGIN
 DECLARE STATEMENT VARCHAR(128);
 DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' BEGIN END;
 SET STATEMENT = 'CREATE SCHEMA LOG4DB2_APPENDERS_IMPLEMENTATION';
 EXECUTE IMMEDIATE STATEMENT;
END @

-- Test fixtures
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 P_ONE_TIME_SETUP: BEGIN
  UPDATE LOGDATA.CONF_APPENDERS
    SET PATTERN = '%m'
    WHERE NAME = 'Tables';
  CALL LOGGER.ACTIVATE_CACHE();
  CALL LOGGER.REFRESH_CACHE();
 END P_ONE_TIME_SETUP @

CREATE OR REPLACE PROCEDURE SETUP()
 P_SETUP: BEGIN
  -- Empty
 END P_SETUP @

CREATE OR REPLACE PROCEDURE TEAR_DOWN()
 P_TEAR_DOWN: BEGIN
  DELETE FROM LOGDATA.LOGS
    WHERE DATE_UNIQ = (SELECT MAX(DATE_UNIQ) FROM LOGDATA.LOGS);
  DELETE FROM LOGDATA.LOGS
    WHERE MESSAGE = 'Before'
    AND DATE_UNIQ = (SELECT MAX(DATE_UNIQ) FROM LOGDATA.LOGS);
 END P_TEAR_DOWN @

CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 P_ONE_TIME_TEAR_DOWN: BEGIN
  CALL LOGGER_1RC.LOGADMIN.RESET_TABLES();
  CALL LOGGER.ACTIVATE_CACHE();
  CALL LOGGER.REFRESH_CACHE();
 END P_ONE_TIME_TEAR_DOWN @

-- Tests

-- Test01: Writes in LOGS with autonomous procedure.
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE AUTONOMOUS_VALUE ANCHOR LOGDATA.CONFIGURATION.VALUE;
  DECLARE EXPECTED_MSG ANCHOR LOGDATA.LOGS.MESSAGE;
  DECLARE ACTUAL_MSG ANCHOR LOGDATA.LOGS.MESSAGE;

  SET AUTONOMOUS_VALUE = 'true';
  SET EXPECTED_MSG = 'Test1-autonomous';
  CALL LOGGER.ACTIVATE_CACHE();
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = AUTONOMOUS_VALUE
    WHERE KEY = 'autonomousLogging';
  CALL LOGGER.REFRESH_CACHE();
  CALL LOGGER.FATAL(0, EXPECTED_MSG);
  COMMIT;
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM LOGS
    WHERE DATE_UNIQ = (SELECT MAX(DATE_UNIQ)
      FROM LOGS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test01: Writes with autonomous procedure',
    EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test02: Writes in LOGS with non-autonomous procedure.
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE AUTONOMOUS_VALUE ANCHOR LOGDATA.CONFIGURATION.VALUE;
  DECLARE EXPECTED_MSG ANCHOR LOGDATA.LOGS.MESSAGE;
  DECLARE ACTUAL_MSG ANCHOR LOGDATA.LOGS.MESSAGE;

  SET AUTONOMOUS_VALUE = 'false';
  SET EXPECTED_MSG = 'Test2-non-autonomous';
  CALL LOGGER.ACTIVATE_CACHE();
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = AUTONOMOUS_VALUE
    WHERE KEY = 'autonomousLogging';
  CALL LOGGER.REFRESH_CACHE();
  CALL LOGGER.FATAL(0, EXPECTED_MSG);
  COMMIT;
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM LOGS
    WHERE DATE_UNIQ = (SELECT MAX(DATE_UNIQ)
      FROM LOGS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test02: Writes with non-autonomous '
    || 'procedure',
    EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test03: Rollbacks in LOGS with autonomous procedure.
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE AUTONOMOUS_VALUE ANCHOR LOGDATA.CONFIGURATION.VALUE;
  DECLARE EXPECTED_MSG ANCHOR LOGDATA.LOGS.MESSAGE;
  DECLARE ACTUAL_MSG ANCHOR LOGDATA.LOGS.MESSAGE;

  SET AUTONOMOUS_VALUE = 'true';
  SET EXPECTED_MSG = 'Test3-autonomous-rollback';
  CALL LOGGER.ACTIVATE_CACHE();
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = AUTONOMOUS_VALUE
    WHERE KEY = 'autonomousLogging';
  CALL LOGGER.REFRESH_CACHE();
  CALL LOGGER.FATAL(0, 'Before');
  COMMIT;
  CALL LOGGER.FATAL(0, EXPECTED_MSG);
  ROLLBACK;
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM LOGS
    WHERE DATE_UNIQ = (SELECT MAX(DATE_UNIQ)
      FROM LOGS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test03: Rollbacks with autonomous '
    || 'procedure',
    EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Test04: Rollbacks in LOGS with non-autonomous procedure.
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE AUTONOMOUS_VALUE ANCHOR LOGDATA.CONFIGURATION.VALUE;
  DECLARE EXPECTED_MSG ANCHOR LOGDATA.LOGS.MESSAGE;
  DECLARE ACTUAL_MSG ANCHOR LOGDATA.LOGS.MESSAGE;

  SET AUTONOMOUS_VALUE = 'false';
  SET EXPECTED_MSG = 'Before';
  CALL LOGGER.ACTIVATE_CACHE();
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = AUTONOMOUS_VALUE
    WHERE KEY = 'autonomousLogging';
  CALL LOGGER.REFRESH_CACHE();
  CALL LOGGER.FATAL(0, EXPECTED_MSG);
  COMMIT;
  CALL LOGGER.FATAL(0, 'Test4-non-autonomous-rollback');
  ROLLBACK;
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM LOGS
    WHERE DATE_UNIQ = (SELECT MAX(DATE_UNIQ)
      FROM LOGS);

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test04: Rollbacks with non-autonomous '
    || 'procedure',
    EXPECTED_MSG, ACTUAL_MSG);
 END@

-- Register the suite.
CALL DB2UNIT.REGISTER_SUITE(CURRENT SCHEMA) @

