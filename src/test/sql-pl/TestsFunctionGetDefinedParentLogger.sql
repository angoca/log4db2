--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the Get Defined Parent Logger function.
 */

SET CURRENT SCHEMA LOGGER_1B @

SET PATH = "SYSIBM","SYSFUN","SYSPROC","SYSIBMADM", LOGGER_1B @

!echo NOTE: Make sure triggers are deleted @

CREATE OR REPLACE TRIGGER T1_CNF_CCHE
  AFTER INSERT OR UPDATE ON LOGDATA.CONFIGURATION
  REFERENCING NEW AS N
  FOR EACH ROW
 T1_CNF_CCHE: BEGIN
  DECLARE TMP ANCHOR LOGDATA.CONFIGURATION.VALUE;
  CASE N.KEY
   WHEN 'internalCache' THEN
    IF (N.VALUE = 'true') THEN
     CALL LOGGER.ACTIVATE_CACHE();
    ELSE
     CALL LOGGER.DEACTIVATE_CACHE();
    END IF;
   ELSE
    -- NOTHING.
  END CASE;
 END T1_CNF_CCHE @

CREATE OR REPLACE FUNCTION GET_MAX_ID()
  RETURNS ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
 BEGIN
  DECLARE RET ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  SET RET = (SELECT MAX(LOGGER_ID)
    FROM LOGDATA.CONF_LOGGERS);
  RETURN RET;
 END@

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '00000';
DECLARE VAL_SEQ SMALLINT;
DECLARE VAL_SEQ_2 SMALLINT;

DECLARE RAISED_LG0F1 BOOLEAN DEFAULT FALSE; -- Invalid parameter.
DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

-- Controlled SQL State.
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0F1'
  BEGIN
   INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0F1 = TRUE;
  END;

-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 4, 'Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'TestsFunctionGetDefinedParentLoggeer: Preparing environment');
SET RAISED_LG0F1 = FALSE;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '3'
  WHERE KEY = 'defaultRootLevelId';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'internalCache';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'logInternals';
CALL LOGGER.UNLOAD_CONF();
COMMIT;

-- Test01: Get default ROOT level.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test01: Get Defined parent logger');
SET EXPECTED = 1;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = CHAR(EXPECTED)
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.UNLOAD_CONF();
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(0);
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test02: Get defined ROOT level.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test02: Get defined ROOT level');
SET EXPECTED = 2;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(0);
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test03: Get default ROOT level from one logger.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test03: Get default ROOT level from one logger');
SET EXPECTED = 3;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = CHAR(EXPECTED)
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.UNLOAD_CONF();
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test04: Get defined ROOT level from one logger.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test04: Get defined ROOT level from one logger');
SET EXPECTED = 4;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test05: Get level from one logger.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test05: Get level from one logger');
SET EXPECTED = 5;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = CHAR(EXPECTED)
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.UNLOAD_CONF();
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, 2);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test06: Get level from one logger all defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test06: Get from one logger all defined');
SET EXPECTED = 0;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, 1);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test07: From three levels get default.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test07: From three levels get default');
SET EXPECTED = 1;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = CHAR(EXPECTED)
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.UNLOAD_CONF();
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test08: From three levels get default from defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test08: From three levels get default form defined');
SET EXPECTED = 2;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = CHAR(EXPECTED)
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.UNLOAD_CONF();
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, 3);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test09: From three levels get root.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test09: From three levels get root');
SET EXPECTED = 3;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test10: From three levels get root from defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test10: From three levels get root from defined');
SET EXPECTED = 4;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, 4);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test11: From three levels get parent null root.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test11: From three levels get parent null root');
SET EXPECTED = 5;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, EXPECTED);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test12: From three levels get parent.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test12: From three levels get parent');
SET EXPECTED = 0;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, EXPECTED);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, 4);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test13: From three levels get parent root defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test11: From three levels get parent root defined');
SET EXPECTED = 2;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, EXPECTED);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test14: From three levels get parent all defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test14: From three levels get parent all defined');
SET EXPECTED = 3;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 4
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, EXPECTED);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, 5);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test15: Get defined ROOT level when there are other levels.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test15: Get defined ROOT level when there are other levels.');
SET EXPECTED = 0;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, 1);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', 0, 2);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, 3);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(0);
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test16: Get defined level for root's son.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test16: Get defined level for root''s son.');
SET EXPECTED = 5;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, 1);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', 0, 2);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, 3);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(VAL_SEQ);
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test17: Get defined level for root's son with descendency.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test17: Get defined level for root''s son with descendency.');
SET EXPECTED = 4;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, 1);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', 0, 2);
SET VAL_SEQ_2 = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, 3);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(VAL_SEQ_2);
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test18: Get defined level for second level.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test18: Get defined level for second level.');
SET EXPECTED = 3;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, EXPECTED);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', 0, 2);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, 3);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test19: Get level when nothing defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test19: Get level when nothing defined.');
SET EXPECTED = 3; -- Default
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', 0, NULL);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(VAL_SEQ);
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test20: Get 2o. level when root defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test20: Get 2o. level when nothing defined.');
SET EXPECTED = 3; -- Default
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', 0, NULL);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test21: Get ROOT level when root defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test21: Get ROOT level when root defined.');
SET EXPECTED = 5;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', 0, NULL);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(0);
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test22: Get first level when root defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test22: Get first level when root defined.');
SET EXPECTED = 2;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '2'
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.UNLOAD_CONF();
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', 0, NULL);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(VAL_SEQ);
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test23: Get second level when nothing defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test23: Get second level when root defined.');
SET EXPECTED = 4;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '4'
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.UNLOAD_CONF();
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', 0, NULL);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test24: Get third level when nothing defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test24: Get third level when nothing defined.');
SET EXPECTED = 3; -- Default.
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '3'
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.UNLOAD_CONF();
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', VAL_SEQ, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test25: Get third level when root defined.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test25: Get third level when root defined.');
SET EXPECTED = 4;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('foo', 0, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('toto', VAL_SEQ, NULL);
SET VAL_SEQ = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('bar', VAL_SEQ, NULL);
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());
IF (EXPECTED <> ACTUAL) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different Parent logger');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, EXPECTED || ' - ' || ACTUAL);
END IF;
COMMIT;

-- Test26: Get null.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test26: Get null.');
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(NULL);
IF (RAISED_LG0F1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Exception not raised LG0F1');
ELSE
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 5, 'Exception raised LG0F1');
END IF;
SET RAISED_LG0F1 = FALSE;
COMMIT;

-- Test27: Get negative.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'Test27: Get negative.');
SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(-1);
IF (RAISED_LG0F1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Exception not raised LG0F1');
ELSE
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 5, 'Exception raised LG0F1');
END IF;
SET RAISED_LG0F1 = FALSE;
COMMIT;

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'TestsFunctionGetDefinedParentLoggeer: Cleaning environment');
-- Root logger.
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
DELETE FROM LOGDATA.CONFIGURATION;
INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
  VALUES ('checkHierarchy', 'false'),
         ('checkLevels', 'false'),
         ('defaultRootLevelId', '3'),
         ('internalCache', 'true'),
         ('logInternals', 'false'),
         ('secondsToRefresh', '30');
CALL LOGGER.UNLOAD_CONF();
COMMIT;
INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 3, 'TestsFunctionGetDefinedParentLoggeer: Finished succesfully');

END @

DROP FUNCTION GET_MAX_ID @

