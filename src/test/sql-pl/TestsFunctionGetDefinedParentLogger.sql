--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the Get Defined Parent Logger function.
 *
 * Version: 2014-04-21 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOG4DB2_FUNCTION_GET_DEFINED_PARENT_LOGGER @

CREATE SCHEMA LOG4DB2_FUNCTION_GET_DEFINED_PARENT_LOGGER @

SET PATH = LOGGER_1RC, LOG4DB2_FUNCTION_GET_DEFINED_PARENT_LOGGER @

-- Install

CREATE OR REPLACE TRIGGER T1_CNF_CCHE
  AFTER INSERT OR UPDATE ON LOGDATA.CONFIGURATION
  REFERENCING NEW AS N
  FOR EACH ROW
 T1_CNF_CCHE: BEGIN
  DECLARE TMP ANCHOR LOGDATA.CONFIGURATION.VALUE;
  CASE N.KEY
   WHEN 'internalCache' THEN
    IF (N.VALUE = 'true') THEN
     CALL LOGGER.ACTIVATE_CACHE();
    ELSE
     CALL LOGGER.DEACTIVATE_CACHE();
    END IF;
   ELSE
    -- NOTHING.
  END CASE;
 END T1_CNF_CCHE @

CREATE OR REPLACE FUNCTION GET_MAX_ID(
  ) RETURNS ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
 BEGIN
  DECLARE RET ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  SET RET = (SELECT MAX(LOGGER_ID)
    FROM LOGDATA.CONF_LOGGERS);
  RETURN RET;
 END@

-- Test fixtures
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 BEGIN
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'false'
    WHERE KEY = 'internalCache';
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'false'
    WHERE KEY = 'logInternals';
  CALL LOGGER.UNLOAD_CONF();
 END @

CREATE OR REPLACE PROCEDURE SETUP()
 BEGIN
  -- Empty
 END @

CREATE OR REPLACE PROCEDURE TEAR_DOWN()
 BEGIN
  -- Empty
 END @

CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 BEGIN
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 3
    WHERE LOGGER_ID = 0;
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
    VALUES ('autonomousLogging', 'true'),
           ('defaultRootLevelId', '3'),
           ('internalCache', 'true'),
           ('logInternals', 'false'),
           ('secondsToRefresh', '30');
  CALL LOGGER.UNLOAD_CONF();
 END @

-- Tests

-- Test01: Get default ROOT level.
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED = 1;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = CHAR(EXPECTED)
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.UNLOAD_CONF();
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(0);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test01: Get Defined parent logger',
    EXPECTED, ACTUAL);
 END @

-- Test02: Get defined ROOT level.
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED = 2;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(0);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test02: Get defined ROOT level',
    EXPECTED, ACTUAL);
 END @

-- Test03: Get default ROOT level from one logger.
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED = 3;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = CHAR(EXPECTED)
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.UNLOAD_CONF();
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test03: Get default ROOT level from one '
    || 'logger', EXPECTED, ACTUAL);
 END @

-- Test04: Get defined ROOT level from one logger.
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED = 4;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test04: Get defined ROOT level from one '
    || 'logger', EXPECTED, ACTUAL);
 END @

-- Test05: Get level from one logger.
CREATE OR REPLACE PROCEDURE TEST_05()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED = 5;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = CHAR(EXPECTED)
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.UNLOAD_CONF();
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, 2);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test05: Get level from one logger',
    EXPECTED, ACTUAL);
 END @

-- Test06: Get level from one logger all defined.
CREATE OR REPLACE PROCEDURE TEST_06()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED = 0;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, 1);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test06: Get from one logger all defined',
    EXPECTED, ACTUAL);
 END @

-- Test07: From three levels get default.
CREATE OR REPLACE PROCEDURE TEST_07()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 1;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = CHAR(EXPECTED)
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.UNLOAD_CONF();
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test07: From three levels get default',
    EXPECTED, ACTUAL);
 END @

-- Test08: From three levels get default from defined.
CREATE OR REPLACE PROCEDURE TEST_08()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 2;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = CHAR(EXPECTED)
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.UNLOAD_CONF();
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, 3);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test08: From three levels get default form defined',
    EXPECTED, ACTUAL);
 END @

-- Test09: From three levels get root.
CREATE OR REPLACE PROCEDURE TEST_09()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 3;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test09: From three levels get root',
    EXPECTED, ACTUAL);
 END @

-- Test10: From three levels get root from defined.
CREATE OR REPLACE PROCEDURE TEST_10()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 4;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, 4);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test10: From three levels get root from defined',
    EXPECTED, ACTUAL);
 END @

-- Test11: From three levels get parent null root.
CREATE OR REPLACE PROCEDURE TEST_11()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 5;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, EXPECTED);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test11: From three levels get parent null root',
    EXPECTED, ACTUAL);
 END @

-- Test12: From three levels get parent.
CREATE OR REPLACE PROCEDURE TEST_12()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 0;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, EXPECTED);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, 4);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test12: From three levels get parent',
    EXPECTED, ACTUAL);
 END @

-- Test13: From three levels get parent root defined.
CREATE OR REPLACE PROCEDURE TEST_13()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 2;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 3
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, EXPECTED);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test11: From three levels get parent root defined',
    EXPECTED, ACTUAL);
 END @

-- Test14: From three levels get parent all defined.
CREATE OR REPLACE PROCEDURE TEST_14()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 3;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 4
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, EXPECTED);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, 5);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test14: From three levels get parent all defined',
    EXPECTED, ACTUAL);
 END @

-- Test15: Get defined ROOT level when there are other levels.
CREATE OR REPLACE PROCEDURE TEST_15()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 0;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, 1);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', 0, 2);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, 3);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(0);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test15: Get defined ROOT level when there are other levels',
    EXPECTED, ACTUAL);
 END @

-- Test16: Get defined level for root's son.
CREATE OR REPLACE PROCEDURE TEST_16()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 5;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, 1);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', 0, 2);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, 3);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(VAL_SEQ);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test16: Get defined level for root''s son',
    EXPECTED, ACTUAL);
 END @

-- Test17: Get defined level for root's son with descendency.
CREATE OR REPLACE PROCEDURE TEST_17()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  DECLARE VAL_SEQ_2 SMALLINT;
  SET EXPECTED = 4;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, 1);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', 0, 2);
  SET VAL_SEQ_2 = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, 3);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(VAL_SEQ_2);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test17: Get defined level for root''s son with descendency',
    EXPECTED, ACTUAL);
 END @

-- Test18: Get defined level for second level.
CREATE OR REPLACE PROCEDURE TEST_18()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 3;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, EXPECTED);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', 0, 2);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, 3);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test18: Get defined level for second level',
    EXPECTED, ACTUAL);
 END @

-- Test19: Get level when nothing defined.
CREATE OR REPLACE PROCEDURE TEST_19()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 3; -- Default
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', 0, NULL);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(VAL_SEQ);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test19: Get level when nothing defined',
    EXPECTED, ACTUAL);
 END @

-- Test20: Get 2o. level when root defined.
CREATE OR REPLACE PROCEDURE TEST_20()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 3; -- Default
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', 0, NULL);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test20: Get 2o. level when nothing defined',
    EXPECTED, ACTUAL);
END @

-- Test21: Get ROOT level when root defined.
CREATE OR REPLACE PROCEDURE TEST_21()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 5;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', 0, NULL);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(0);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test21: Get ROOT level when root defined',
    EXPECTED, ACTUAL);
 END @

-- Test22: Get first level when root defined.
CREATE OR REPLACE PROCEDURE TEST_22()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 2;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '2'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.UNLOAD_CONF();
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', 0, NULL);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(VAL_SEQ);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test22: Get first level when root defined',
    EXPECTED, ACTUAL);
 END @

-- Test23: Get second level when nothing defined.
CREATE OR REPLACE PROCEDURE TEST_23()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 4;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '4'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.UNLOAD_CONF();
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', 0, NULL);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test23: Get second level when root defined',
    EXPECTED, ACTUAL);
END @

-- Test24: Get third level when nothing defined.
CREATE OR REPLACE PROCEDURE TEST_24()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 3; -- Default.
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.UNLOAD_CONF();
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', VAL_SEQ, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test24: Get third level when nothing defined',
    EXPECTED, ACTUAL);
 END @

-- Test25: Get third level when root defined.
CREATE OR REPLACE PROCEDURE TEST_25()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  DECLARE VAL_SEQ SMALLINT;
  SET EXPECTED = 4;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('foo', 0, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('toto', VAL_SEQ, NULL);
  SET VAL_SEQ = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('bar', VAL_SEQ, NULL);
  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(GET_MAX_ID());

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test25: Get third level when root defined',
    EXPECTED, ACTUAL);
 END @

-- Test26: Get null.
CREATE OR REPLACE PROCEDURE TEST_26()
 BEGIN
  DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE RAISED_LG0F1 BOOLEAN DEFAULT FALSE; -- Invalid parameter.
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0F1'
    SET RAISED_LG0F1 = TRUE;

 SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test26: Get null',
    RAISED_LG0F1);
 END @

-- Test27: Get negative.
CREATE OR REPLACE PROCEDURE TEST_27()
 BEGIN
 DECLARE ACTUAL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
 DECLARE EXPECTED ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
 DECLARE RAISED_LG0F1 BOOLEAN DEFAULT FALSE; -- Invalid parameter.
 DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0F1'
   SET RAISED_LG0F1 = TRUE;

  SET ACTUAL = LOGGER.GET_DEFINED_PARENT_LOGGER(-1);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test27: Get negative',
    RAISED_LG0F1);
 END @

