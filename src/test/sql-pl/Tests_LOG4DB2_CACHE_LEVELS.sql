--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the logger cache functionality for levels.
 *
 * Version: 2014-04-21 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOG4DB2_CACHE_LEVELS @

SET PATH = LOG4DB2_CACHE_LEVELS @

CREATE SCHEMA LOG4DB2_CACHE_LEVELS @

-- Test fixtures
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 P_ONE_TIME_SETUP: BEGIN
  CALL LOGGER.DEACTIVATE_CACHE();
 END P_ONE_TIME_SETUP @

CREATE OR REPLACE PROCEDURE SETUP()
 P_SETUP: BEGIN
  -- Empty
 END P_SETUP @

CREATE OR REPLACE PROCEDURE TEAR_DOWN()
 P_TEAR_DOWN: BEGIN
  CALL LOGGER.ACTIVATE_CACHE();
  DELETE FROM LOGDATA.LEVELS
    WHERE LEVEL_ID = 6;
  CALL LOGGER.REFRESH_CACHE();
 END P_TEAR_DOWN @

CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 P_ONE_TIME_TEAR_DOWN: BEGIN
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
    VALUES ('autonomousLogging', 'false'),
           ('defaultRootLevelId', '3'),
           ('internalCache', 'true'),
           ('logInternals', 'false'),
           ('secondsToRefresh', '30');
  CALL LOGGER.ACTIVATE_CACHE();
  CALL LOGGER.REFRESH_CACHE();
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsCacheLevel: Finished succesfully');
 END P_ONE_TIME_TEAR_DOWN @

-- Install

BEGIN
 DECLARE QUERY VARCHAR(4096);
 
 -- Drop previous function (if exist)
 SET QUERY = 'ALTER MODULE LOGGER_1RC.LOGGER DROP FUNCTION GET_LEVEL_NAME2';
 BEGIN
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42704'
   BEGIN END;
  EXECUTE IMMEDIATE QUERY;
 END;
 -- Drop previous function (if exist)
 SET QUERY = 'ALTER MODULE LOGGER_1RC.LOGGER DROP FUNCTION EXIST_LEVEL2';
 BEGIN
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42704'
   BEGIN END;
  EXECUTE IMMEDIATE QUERY;
 END;
 -- Drop previous function (if exist)
 SET QUERY = 'ALTER MODULE LOGGER_1RC.LOGGER DROP FUNCTION BOOL_TO_CHAR2';
 BEGIN
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42704'
   BEGIN END;
  EXECUTE IMMEDIATE QUERY;
 END;

 -- Extract the private function and publish it.
 SELECT
   REPLACE
    (REPLACE
     (REPLACE
      (REPLACE
       (REPLACE
        (BODY,
        'ALTER MODULE LOGGER ADD',
        'ALTER MODULE LOGGER_1RC.LOGGER PUBLISH'),
       'FUNCTION GET_LEVEL_NAME',
       'FUNCTION GET_LEVEL_NAME2'),
      'SPECIFIC F_GET_LEVEL_NAME',
      'SPECIFIC F_GET_LEVEL_NAME2'),
     'F_GET_LEVEL_NAME: BEGIN',
     'F_GET_LEVEL_NAME2: BEGIN'),
    'END F_GET_LEVEL_NAME',
    'END F_GET_LEVEL_NAME2')
   INTO QUERY
   FROM SYSCAT.FUNCTIONS
   WHERE FUNCNAME LIKE 'GET_LEVEL_NAME'
   AND FUNCSCHEMA LIKE 'LOGGER_1RC%';
 EXECUTE IMMEDIATE QUERY;
 
 SELECT
   REPLACE
    (REPLACE
     (REPLACE
      (REPLACE
       (REPLACE
        (BODY,
        'ALTER MODULE LOGGER ADD',
        'ALTER MODULE LOGGER_1RC.LOGGER PUBLISH'),
       'FUNCTION EXIST_LEVEL',
       'FUNCTION EXIST_LEVEL2'),
      'SPECIFIC F_EXIST_LEVEL',
      'SPECIFIC F_EXIST_LEVEL2'),
     'F_EXIST_LEVEL: BEGIN',
     'F_EXIST_LEVEL2: BEGIN'),
    'END F_EXIST_LEVEL',
    'END F_EXIST_LEVEL2')
   INTO QUERY
   FROM SYSCAT.FUNCTIONS
   WHERE FUNCNAME LIKE 'EXIST_LEVEL'
   AND FUNCSCHEMA LIKE 'LOGGER_1RC%';
 EXECUTE IMMEDIATE QUERY;
 
 SELECT
   REPLACE
    (REPLACE
     (REPLACE
      (REPLACE
       (REPLACE
        (BODY,
        'ALTER MODULE LOGGER ADD',
        'ALTER MODULE LOGGER_1RC.LOGGER PUBLISH'),
       'FUNCTION BOOL_TO_CHAR',
       'FUNCTION BOOL_TO_CHAR2'),
      'SPECIFIC F_BOOL_TO_CHAR',
      'SPECIFIC F_BOOL_TO_CHAR2'),
     'F_BOOL_TO_CHAR: BEGIN',
     'F_BOOL_TO_CHAR2: BEGIN'),
    'END F_BOOL_TO_CHAR',
    'END F_BOOL_TO_CHAR2')
   INTO QUERY
   FROM SYSCAT.FUNCTIONS
   WHERE FUNCNAME LIKE 'BOOL_TO_CHAR'
   AND FUNCSCHEMA LIKE 'LOGGER_1RC%';
 EXECUTE IMMEDIATE QUERY;
END@

-- Tests

-- Test01: Test GetLevelName with cache old.
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE LVL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE NME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE EXPECTED_NAME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE ACTUAL_NAME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;

  SET LVL_ID = 6;
  SET NME = 'ALL1';
  SET EXPECTED_NAME = NULL;
  CALL LOGGER.ACTIVATE_CACHE();
  CALL LOGGER.REFRESH_CACHE();
  INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
  SET ACTUAL_NAME = LOGGER.GET_LEVEL_NAME2(6);

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test01: Test GetLogger with cache old',
    EXPECTED_NAME, ACTUAL_NAME);
 END@

-- Test02: Test GetLevelName with cache.
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE LVL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE NME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE EXPECTED_NAME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE ACTUAL_NAME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;

  SET LVL_ID = 6;
  SET NME = 'ALL2';
  SET EXPECTED_NAME = NME;
  CALL LOGGER.ACTIVATE_CACHE();
  INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
  CALL LOGGER.REFRESH_CACHE();
  SET ACTUAL_NAME = LOGGER.GET_LEVEL_NAME2(6);

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test02: Test GetLogger with cache',
    EXPECTED_NAME, ACTUAL_NAME);
 END@

-- Test03: Test GetLevelName without cache.
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE LVL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE NME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE EXPECTED_NAME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE ACTUAL_NAME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;

  SET LVL_ID = 6;
  SET NME = 'ALL3';
  SET EXPECTED_NAME = NME;
  CALL LOGGER.DEACTIVATE_CACHE();
  INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
  CALL LOGGER.REFRESH_CACHE();
  SET ACTUAL_NAME = LOGGER.GET_LEVEL_NAME2(6);

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test03: Test GetLogger without cache',
    EXPECTED_NAME, ACTUAL_NAME);
 END@

-- Test04: Test ExistLevel with cache old.
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE LVL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE NME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE EXPECTED_EXIST BOOLEAN;
  DECLARE ACTUAL_EXIST BOOLEAN;

  SET LVL_ID = 6;
  SET NME = 'ALL4';
  SET EXPECTED_EXIST = FALSE;
  CALL LOGGER.ACTIVATE_CACHE();
  CALL LOGGER.REFRESH_CACHE();
  INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
  SET ACTUAL_EXIST = LOGGER.EXIST_LEVEL2(6);

  CALL DB2UNIT.ASSERT_BOOLEAN_EQUALS('Test04: Test ExistLevel with cache old',
    EXPECTED_EXIST, ACTUAL_EXIST);
 END@

-- Test05: Test ExistLevel with cache.
CREATE OR REPLACE PROCEDURE TEST_05()
 BEGIN
  DECLARE LVL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE NME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE EXPECTED_EXIST BOOLEAN;
  DECLARE ACTUAL_EXIST BOOLEAN;

  SET LVL_ID = 6;
  SET NME = 'ALL5';
  SET EXPECTED_EXIST = TRUE;
  CALL LOGGER.ACTIVATE_CACHE();
  INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
  CALL LOGGER.REFRESH_CACHE();
  SET ACTUAL_EXIST = LOGGER.EXIST_LEVEL2(6);

  CALL DB2UNIT.ASSERT_BOOLEAN_EQUALS('Test05: Test ExistLevel with cache',
    EXPECTED_EXIST, ACTUAL_EXIST);
 END@

-- Test06: Test ExistLevel without cache.
CREATE OR REPLACE PROCEDURE TEST_06()
 BEGIN
  DECLARE LVL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE NME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE EXPECTED_EXIST BOOLEAN;
  DECLARE ACTUAL_EXIST BOOLEAN;

  SET LVL_ID = 6;
  SET NME = 'ALL6';
  SET EXPECTED_EXIST = TRUE;
  CALL LOGGER.DEACTIVATE_CACHE();
  INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
  CALL LOGGER.REFRESH_CACHE();
  SET ACTUAL_EXIST = LOGGER.EXIST_LEVEL2(6);

  CALL DB2UNIT.ASSERT_BOOLEAN_EQUALS('Test06: Test ExistLevel without cache',
    EXPECTED_EXIST, ACTUAL_EXIST);
 END@

-- Test07: Test ExistLevel with cache no.
CREATE OR REPLACE PROCEDURE TEST_07()
 BEGIN
  DECLARE LVL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE NME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE EXPECTED_EXIST BOOLEAN;
  DECLARE ACTUAL_EXIST BOOLEAN;

  SET LVL_ID = 6;
  SET EXPECTED_EXIST = FALSE;
  CALL LOGGER.ACTIVATE_CACHE();
  CALL LOGGER.REFRESH_CACHE();
  SET ACTUAL_EXIST = LOGGER.EXIST_LEVEL2(6);

  CALL DB2UNIT.ASSERT_BOOLEAN_EQUALS('Test07: Test ExistLevel with cache no',
    EXPECTED_EXIST, ACTUAL_EXIST);
 END@

-- Test08: Test ExistLevel without cache no.
CREATE OR REPLACE PROCEDURE TEST_08()
 BEGIN
  DECLARE LVL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE NME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
  DECLARE EXPECTED_EXIST BOOLEAN;
  DECLARE ACTUAL_EXIST BOOLEAN;

  SET LVL_ID = 6;
  SET EXPECTED_EXIST = FALSE;
  CALL LOGGER.DEACTIVATE_CACHE();
  CALL LOGGER.REFRESH_CACHE();
  SET ACTUAL_EXIST = LOGGER.EXIST_LEVEL2(6);

  CALL DB2UNIT.ASSERT_BOOLEAN_EQUALS('Test08: Test ExistLevel without cache no',
    EXPECTED_EXIST, ACTUAL_EXIST);
 END@

-- Register the suite.
CALL DB2UNIT.REGISTER_SUITE(CURRENT SCHEMA) @

