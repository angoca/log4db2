--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the logger cache functionality.
 */

SET CURRENT SCHEMA LOGGER_1B @

SET PATH = "SYSIBM", "SYSFUN", "SYSPROC", "SYSIBMADM", LOGGER_1B @

BEGIN
DECLARE QUERY VARCHAR(4096);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsCacheLevel: Preparing environment');
-- Extract the private function and publish it.
SELECT
  REPLACE
   (REPLACE
    (REPLACE
     (REPLACE
      (REPLACE
       (BODY,
       'ALTER MODULE LOGGER ADD',
       'ALTER MODULE LOGGER PUBLISH'),
      'FUNCTION GET_LEVEL_NAME',
      'FUNCTION GET_LEVEL_NAME2'),
     'SPECIFIC F_GET_LEVEL_NAME',
     'SPECIFIC F_GET_LEVEL_NAME2'),
    'F_GET_LEVEL_NAME: BEGIN',
    'F_GET_LEVEL_NAME2: BEGIN'),
   'END F_GET_LEVEL_NAME',
   'END F_GET_LEVEL_NAME2')
  INTO QUERY
  FROM SYSCAT.FUNCTIONS
  WHERE FUNCNAME LIKE 'GET_LEVEL_NAME'
  AND FUNCSCHEMA LIKE 'LOGGER_1B%';
EXECUTE IMMEDIATE QUERY;

SELECT
  REPLACE
   (REPLACE
    (REPLACE
     (REPLACE
      (REPLACE
       (BODY,
       'ALTER MODULE LOGGER ADD',
       'ALTER MODULE LOGGER PUBLISH'),
      'FUNCTION EXIST_LEVEL',
      'FUNCTION EXIST_LEVEL2'),
     'SPECIFIC F_EXIST_LEVEL',
     'SPECIFIC F_EXIST_LEVEL2'),
    'F_EXIST_LEVEL: BEGIN',
    'F_EXIST_LEVEL2: BEGIN'),
   'END F_EXIST_LEVEL',
   'END F_EXIST_LEVEL2')
  INTO QUERY
  FROM SYSCAT.FUNCTIONS
  WHERE FUNCNAME LIKE 'EXIST_LEVEL'
  AND FUNCSCHEMA LIKE 'LOGGER_1B%';
EXECUTE IMMEDIATE QUERY;

SELECT
  REPLACE
   (REPLACE
    (REPLACE
     (REPLACE
      (REPLACE
       (BODY,
       'ALTER MODULE LOGGER ADD',
       'ALTER MODULE LOGGER PUBLISH'),
      'FUNCTION BOOL_TO_CHAR',
      'FUNCTION BOOL_TO_CHAR2'),
     'SPECIFIC F_BOOL_TO_CHAR',
     'SPECIFIC F_BOOL_TO_CHAR2'),
    'F_BOOL_TO_CHAR: BEGIN',
    'F_BOOL_TO_CHAR2: BEGIN'),
   'END F_BOOL_TO_CHAR',
   'END F_BOOL_TO_CHAR2')
  INTO QUERY
  FROM SYSCAT.FUNCTIONS
  WHERE FUNCNAME LIKE 'BOOL_TO_CHAR'
  AND FUNCSCHEMA LIKE 'LOGGER_1B%';
EXECUTE IMMEDIATE QUERY;
END@

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '00000';

DECLARE MY_KEY ANCHOR LOGDATA.CONFIGURATION.KEY;
DECLARE EXPECTED_NAME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
DECLARE ACTUAL_NAME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
DECLARE NME ANCHOR DATA TYPE TO LOGDATA.LEVELS.NAME;
DECLARE LVL_ID ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
DECLARE ACTUAL_EXIST BOOLEAN;
DECLARE EXPECTED_EXIST BOOLEAN;

-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
CALL LOGGER.DEACTIVATE_CACHE();
COMMIT;

-- Test01: Test GetLevelName with cache old.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test01: Test GetLogger with cache old');
SET LVL_ID = 6;
SET NME = 'ALL1';
SET EXPECTED_NAME = NULL;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
SET ACTUAL_NAME = LOGGER.GET_LEVEL_NAME2(6);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID = LVL_ID;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test02: Test GetLevelName with cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test02: Test GetLogger with cache');
SET LVL_ID = 6;
SET NME = 'ALL2';
SET EXPECTED_NAME = NME;
CALL LOGGER.ACTIVATE_CACHE();
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_NAME = LOGGER.GET_LEVEL_NAME2(6);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID = LVL_ID;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test03: Test GetLevelName without cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test03: Test GetLogger without cache');
SET LVL_ID = 6;
SET NME = 'ALL3';
SET EXPECTED_NAME = NME;
CALL LOGGER.DEACTIVATE_CACHE();
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_NAME = LOGGER.GET_LEVEL_NAME2(6);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
CALL LOGGER.ACTIVATE_CACHE();
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID = LVL_ID;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test04: Test ExistLevel with cache old.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test04: Test ExistLevel with cache old');
SET LVL_ID = 6;
SET NME = 'ALL4';
SET EXPECTED_EXIST = FALSE;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
SET ACTUAL_EXIST = LOGGER.EXIST_LEVEL2(6);
IF (EXPECTED_EXIST <> ACTUAL_EXIST) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different EXIST');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || LOGGER.BOOL_TO_CHAR2(EXPECTED_EXIST) || ' - actual ' || LOGGER.BOOL_TO_CHAR2(ACTUAL_EXIST));
END IF;
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID = LVL_ID;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test05: Test ExistLevel with cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test05: Test ExistLevel with cache');
SET LVL_ID = 6;
SET NME = 'ALL5';
SET EXPECTED_EXIST = TRUE;
CALL LOGGER.ACTIVATE_CACHE();
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_EXIST = LOGGER.EXIST_LEVEL2(6);
IF (EXPECTED_EXIST <> ACTUAL_EXIST) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different EXIST');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || LOGGER.BOOL_TO_CHAR2(EXPECTED_EXIST) || ' - actual ' || LOGGER.BOOL_TO_CHAR2(ACTUAL_EXIST));
END IF;
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID = LVL_ID;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test06: Test ExistLevel without cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test06: Test ExistLevel without cache');
SET LVL_ID = 6;
SET NME = 'ALL6';
SET EXPECTED_EXIST = TRUE;
CALL LOGGER.DEACTIVATE_CACHE();
INSERT INTO LOGDATA.LEVELS (LEVEL_ID, NAME) VALUES (LVL_ID, NME);
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_EXIST = LOGGER.EXIST_LEVEL2(6);
IF (EXPECTED_EXIST <> ACTUAL_EXIST) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different EXIST');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || LOGGER.BOOL_TO_CHAR2(EXPECTED_EXIST) || ' - actual ' || LOGGER.BOOL_TO_CHAR2(ACTUAL_EXIST));
END IF;
CALL LOGGER.ACTIVATE_CACHE();
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID = LVL_ID;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test07: Test ExistLevel with cache no.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test07: Test ExistLevel with cache no');
SET LVL_ID = 6;
SET EXPECTED_EXIST = FALSE;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_EXIST = LOGGER.EXIST_LEVEL2(6);
IF (EXPECTED_EXIST <> ACTUAL_EXIST) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different EXIST');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || LOGGER.BOOL_TO_CHAR2(EXPECTED_EXIST) || ' - actual ' || LOGGER.BOOL_TO_CHAR2(ACTUAL_EXIST));
END IF;
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID = LVL_ID;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test08: Test ExistLevel without cache no.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test08: Test ExistLevel without cache no');
SET LVL_ID = 6;
SET EXPECTED_EXIST = FALSE;
CALL LOGGER.DEACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_EXIST = LOGGER.EXIST_LEVEL2(6);
IF (EXPECTED_EXIST <> ACTUAL_EXIST) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different EXIST');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || LOGGER.BOOL_TO_CHAR2(EXPECTED_EXIST) || ' - actual ' || LOGGER.BOOL_TO_CHAR2(ACTUAL_EXIST));
END IF;
CALL LOGGER.ACTIVATE_CACHE();
DELETE FROM LOGDATA.LEVELS
  WHERE LEVEL_ID = LVL_ID;
CALL LOGGER.REFRESH_CACHE();
COMMIT;
-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsCacheLevel: Cleaning environment');
DELETE FROM LOGDATA.CONFIGURATION;
INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
  VALUES ('autonomousLogging', 'false'),
         ('defaultRootLevelId', '3'),
         ('internalCache', 'true'),
         ('logInternals', 'false'),
         ('secondsToRefresh', '30');
CALL LOGGER.ACTIVATE_CACHE();
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsCacheLevel: Finished succesfully');
COMMIT;

END @

ALTER MODULE LOGGER
  DROP FUNCTION GET_LEVEL_NAME2 @

ALTER MODULE LOGGER
  DROP FUNCTION EXIST_LEVEL2 @

ALTER MODULE LOGGER
  DROP FUNCTION BOOL_TO_CHAR2 @

