--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the references table.
 *
 * Version: 2014-04-21 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOG4DB2_REFERENCES @

CREATE SCHEMA LOG4DB2_REFERENCES @

-- Test fixtures
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 BEGIN
  DECLARE LOG_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;

  DELETE FROM LOGDATA.REFERENCES;
  CALL LOGGER.REFRESH_CACHE();

  CALL LOGGER.GET_LOGGER('DB2UNIT_1A', LOG_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 0
    WHERE LOGGER_ID = LOG_ID;
 END @

CREATE OR REPLACE PROCEDURE SETUP()
 BEGIN
  DELETE FROM LOGDATA.REFERENCES;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  DELETE FROM LOGDATA.CONF_APPENDERS;
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
    VALUES ('Tables', 1, NULL, '[%p] %c - %m');
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = 0;
 END @

CREATE OR REPLACE PROCEDURE TEAR_DOWN()
 BEGIN
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  DELETE FROM LOGDATA.LOGS;
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
    VALUES ('Tables', 1, NULL, '[%p] %c - %m');
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
 END @

CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 BEGIN
  DELETE FROM LOGDATA.REFERENCES;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
 END @

-- Tests

-- Test01: Tries to log when references is empty.
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;

  CALL LOGGER.GET_LOGGER('References-Test1', LOGGER_ID);
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
  CALL LOGGER.INFO(LOGGER_ID, 'Message test');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test01: Tries to log when references is empty',
    EXPECTED_QTY, ACTUAL_QTY);
 END@

-- Test02: Writes one log.
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
  DECLARE MAX_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET LOGGER_NAME = 'References-Test2';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = LOGGER_ID;
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
  CALL LOGGER.INFO(LOGGER_ID, 'Message test');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test02: Writes one log', EXPECTED_QTY,
    ACTUAL_QTY);
 END@

-- Test03: Writes the same log twice (Root and another).
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
  DECLARE LAST_CONF_APPENDER_ID ANCHOR LOGDATA.CONF_APPENDERS.REF_ID;

  SET LOGGER_NAME = 'References-Test3';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = LOGGER_ID;
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
    VALUES ('More DB2 Tables', 1, NULL, '{%p} %c : %m');
  SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 2;
  CALL LOGGER.INFO(LOGGER_ID, 'Message test');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test03: Writes the same log twice (Root and '
    || 'another)', EXPECTED_QTY, ACTUAL_QTY);
 END@

-- Test04: Non-root logger as only logger in references.
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
  DECLARE LAST_CONF_APPENDER_ID ANCHOR LOGDATA.CONF_APPENDERS.REF_ID;

  SET LOGGER_NAME = 'Test4';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = LOGGER_ID;
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
    VALUES ('More DB2 Tables-4', 1, NULL, '{%p} %c : %m');
  SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
  CALL LOGGER.INFO(LOGGER_ID, 'Message test');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test04: Non-root logger as only logger in '
    || 'references', EXPECTED_QTY, ACTUAL_QTY);
 END@

-- Test05: Non-root logger as only logger in references - logs.
CREATE OR REPLACE PROCEDURE TEST_05()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
  DECLARE LAST_CONF_APPENDER_ID ANCHOR LOGDATA.CONF_APPENDERS.REF_ID;

  SET LOGGER_NAME = 'Test5';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = LOGGER_ID;
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
    VALUES ('More DB2 Tables-5', 1, NULL, '(%p) %c : %m');
  SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
  CALL LOGGER.INFO(LOGGER_ID, 'Message test');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test05: Non-root logger as only logger in '
    || 'references - logs', EXPECTED_QTY, ACTUAL_QTY);
 END@

-- Test06: Root logger configured but not logs. Other logger does.
CREATE OR REPLACE PROCEDURE TEST_06()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
  DECLARE LAST_CONF_APPENDER_ID ANCHOR LOGDATA.CONF_APPENDERS.REF_ID;

  SET LOGGER_NAME = 'Test6';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = LOGGER_ID;
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
    VALUES ('More DB2 Tables-6.1', 1, NULL, '1: (%p) %c : %m');
  SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
    VALUES ('More DB2 Tables-6.2', 1, NULL, '2: (%p) %c : %m');
  SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 2;
  CALL LOGGER.INFO(LOGGER_ID, 'Message test 6');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test06: Root logger configured but not logs. '
    || 'Other logger does', EXPECTED_QTY, ACTUAL_QTY);
 END@

-- Test07: Root off. Other off, and another on.
CREATE OR REPLACE PROCEDURE TEST_07()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
  DECLARE LAST_CONF_APPENDER_ID ANCHOR LOGDATA.CONF_APPENDERS.REF_ID;

  SET LOGGER_NAME = 'Test7-1';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = LOGGER_ID;
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
    VALUES ('More DB2 Tables-7.1', 1, NULL, '[[%p]] %c : %m');
  SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
  SET LOGGER_NAME = 'Test7-2';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
  CALL LOGGER.INFO(LOGGER_ID, 'Message test');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test07: Root off. Other off, and another on',
    EXPECTED_QTY, ACTUAL_QTY);
 END@

-- Test08: Root off and other on, but son of the other is on.
CREATE OR REPLACE PROCEDURE TEST_08()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
  DECLARE LAST_CONF_APPENDER_ID ANCHOR LOGDATA.CONF_APPENDERS.REF_ID;
  DECLARE LOGGER_ID_PARENT ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET LOGGER_NAME = 'Test8';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID_PARENT);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = LOGGER_ID;
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
    VALUES ('More DB2 Tables-8.1', 1, NULL, '%c [%p] : %m');
  SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
  CALL LOGGER.GET_LOGGER('Test8.son', LOGGER_ID);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
  CALL LOGGER.INFO(LOGGER_ID, 'Message test');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test08: Root off and other on, but son of '
    || 'the other is on', EXPECTED_QTY, ACTUAL_QTY);
 END@

-- Test09: ConfAppender logging in the same level.
CREATE OR REPLACE PROCEDURE TEST_09()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
  DECLARE LAST_CONF_APPENDER_ID ANCHOR LOGDATA.CONF_APPENDERS.REF_ID;
  DECLARE LOGGER_ID_PARENT ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;

  SET LOGGER_NAME = 'Test9';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = LOGGER_ID;
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN,
    LEVEL_ID) VALUES ('More DB2 Tables-9.1', 1, NULL, '%c [%p] : %m', 2);
  SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
  CALL LOGGER.ERROR(LOGGER_ID, 'Message test');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test09: ConfAppender logging in the same'
    || 'level', EXPECTED_QTY, ACTUAL_QTY);
 END@

-- Test10: ConfAppender logging in lower level.
CREATE OR REPLACE PROCEDURE TEST_10()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
  DECLARE LAST_CONF_APPENDER_ID ANCHOR LOGDATA.CONF_APPENDERS.REF_ID;

  SET LOGGER_NAME = 'Test10';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = LOGGER_ID;
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN,
    LEVEL_ID) VALUES ('More DB2 Tables-10.1', 1, NULL, '%c [%p] : %m', 2);
  SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
  CALL LOGGER.FATAL(LOGGER_ID, 'Message test');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test10: ConfAppender logging in lower level',
    EXPECTED_QTY, ACTUAL_QTY);
 END@

-- Test11: ConfAppender logging in upper level.
CREATE OR REPLACE PROCEDURE TEST_11()
 BEGIN
  DECLARE EXPECTED_QTY SMALLINT;
  DECLARE ACTUAL_QTY SMALLINT;

  DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
  DECLARE LAST_CONF_APPENDER_ID ANCHOR LOGDATA.CONF_APPENDERS.REF_ID;

  SET LOGGER_NAME = 'Test11';
  CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 5
    WHERE LOGGER_ID = LOGGER_ID;
  INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN,
    LEVEL_ID) VALUES ('More DB2 Tables-11.1', 1, NULL, '%c [%p] : %m', 2);
  SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
  INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
    VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
  SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
  CALL LOGGER.INFO(LOGGER_ID, 'Message test');
  SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test11: ConfAppender logging in upper level',
    EXPECTED_QTY, ACTUAL_QTY);
 END@

