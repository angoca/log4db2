--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the references table.
 */

SET CURRENT SCHEMA LOGGER_1B @

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '00000';

DECLARE LOGGER_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE LOGGER_ID_PARENT ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE LOGGER_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
DECLARE EXPECTED_QTY SMALLINT;
DECLARE ACTUAL_QTY SMALLINT;
DECLARE LAST_CONF_APPENDER_ID ANCHOR LOGDATA.CONF_APPENDERS.REF_ID;

-- Controlled SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'TestsReferences: Preparing environment');
DELETE FROM LOGDATA.REFERENCES;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test01: Tries to log when references is empty.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test01: Tries to log when references is empty');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = 0;
CALL LOGGER.GET_LOGGER('References-Test1', LOGGER_ID);
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
CALL LOGGER.INFO(LOGGER_ID, 'Message test');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
COMMIT;

-- Test02: Writes one log.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test02: Writes one log');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = 0;
SET LOGGER_NAME = 'References-Test2';
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = LOGGER_ID;
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
CALL LOGGER.INFO(LOGGER_ID, 'Message test');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%INFO%Message test%' 
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
COMMIT;

-- Test03: Writes the same log twice (Root and another).
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test03: Writes the same log twice');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = 0;
SET LOGGER_NAME = 'References-Test3';
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = LOGGER_ID;
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('More DB2 Tables', 1, NULL, '{%p} %c : %m');
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 2;
CALL LOGGER.INFO(LOGGER_ID, 'Message test');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%INFO%Message test%' 
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%INFO%Message test%' 
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
COMMIT;

-- Test04: Non-root logger as only logger in references.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test04: Non-root logger as only logger in references');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS;
SET LOGGER_NAME = 'Test4';
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = LOGGER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('More DB2 Tables-4', 1, NULL, '{%p} %c : %m');
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
CALL LOGGER.INFO(LOGGER_ID, 'Message test');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
DELETE FROM LOGDATA.REFERENCES WHERE LOGGER_ID = LOGGER_ID;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS WHERE REF_ID = LAST_CONF_APPENDER_ID;
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%INFO%Message test%'
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('Tables', 1, NULL, '[%p] %c - %m');
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
COMMIT;

-- Test05: Non-root logger as only logger in references - logs.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test05: Non-root logger as only logger in references - logs');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS;
SET LOGGER_NAME = 'Test5';
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = 0;
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = LOGGER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('More DB2 Tables-5', 1, NULL, '(%p) %c : %m');
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
CALL LOGGER.INFO(LOGGER_ID, 'Message test');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
DELETE FROM LOGDATA.REFERENCES WHERE LOGGER_ID = LOGGER_ID;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS WHERE REF_ID = LAST_CONF_APPENDER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('Tables', 1, NULL, '[%p] %c - %m');
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%INFO%Message test%'
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
COMMIT;

-- Test06: Root logger configured but not logs. Other logger does.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test06: Root logger configured but not logs. Other logger does.');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = 0;
SET LOGGER_NAME = 'Test6';
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = LOGGER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('More DB2 Tables-6.1', 1, NULL, '1: (%p) %c : %m');
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('More DB2 Tables-6.2', 1, NULL, '2: (%p) %c : %m');
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 2;
CALL LOGGER.INFO(LOGGER_ID, 'Message test 6');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
DELETE FROM LOGDATA.REFERENCES WHERE LOGGER_ID = LOGGER_ID;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS WHERE REF_ID = LAST_CONF_APPENDER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('Tables', 1, NULL, '[%p] %c - %m');
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%INFO%Message test%' 
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%INFO%Message test%' 
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
COMMIT;

-- Test07: Root off. Other off, and another on.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test07: Root off. Other off, and another on');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS;

UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = 0;
SET LOGGER_NAME = 'Test7-1';
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = LOGGER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('More DB2 Tables-7.1', 1, NULL, '[[%p]] %c : %m');
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
SET LOGGER_NAME = 'Test7-2';
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
CALL LOGGER.INFO(LOGGER_ID, 'Message test');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
DELETE FROM LOGDATA.REFERENCES WHERE LOGGER_ID = LOGGER_ID;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS WHERE REF_ID = LAST_CONF_APPENDER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('Tables', 1, NULL, '[%p] %c - %m');
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%INFO%' 
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
COMMIT;

-- Test08: Root off and other on, but son of the other is on.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test08: Root off and other on, but son of the other is on');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = 0;
SET LOGGER_NAME = 'Test8';
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID_PARENT);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = LOGGER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('More DB2 Tables-8.1', 1, NULL, '%c [%p] : %m');
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
CALL LOGGER.GET_LOGGER('Test8.son', LOGGER_ID);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
CALL LOGGER.INFO(LOGGER_ID, 'Message test');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
DELETE FROM LOGDATA.REFERENCES WHERE LOGGER_ID = LOGGER_ID;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS WHERE REF_ID = LAST_CONF_APPENDER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('Tables', 1, NULL, '[%p] %c - %m');
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%INFO%Message test%' 
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
COMMIT;

-- Test09: ConfAppender logging in the same level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test09: ConfAppender logging in the same level');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = 0;
SET LOGGER_NAME = 'Test9';
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = LOGGER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN, LEVEL_ID)
  VALUES ('More DB2 Tables-9.1', 1, NULL, '%c [%p] : %m', 2);
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
CALL LOGGER.ERROR(LOGGER_ID, 'Message test');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
DELETE FROM LOGDATA.REFERENCES WHERE LOGGER_ID = LOGGER_ID;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS WHERE REF_ID = LAST_CONF_APPENDER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('Tables', 1, NULL, '[%p] %c - %m');
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%ERROR%Message test%' 
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
COMMIT;

-- Test10: ConfAppender logging in lower level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test10: ConfAppender logging in lower level');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = 0;
SET LOGGER_NAME = 'Test10';
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = LOGGER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN, LEVEL_ID)
  VALUES ('More DB2 Tables-10.1', 1, NULL, '%c [%p] : %m', 2);
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS) + 1;
CALL LOGGER.FATAL(LOGGER_ID, 'Message test');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
DELETE FROM LOGDATA.REFERENCES WHERE LOGGER_ID = LOGGER_ID;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS WHERE REF_ID = LAST_CONF_APPENDER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('Tables', 1, NULL, '[%p] %c - %m');
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
DELETE FROM LOGDATA.LOGS
  WHERE MESSAGE LIKE '%FATAL%Message test%' 
  AND DATE = (SELECT MAX(DATE) FROM LOGDATA.LOGS);
COMMIT;

-- Test11: ConfAppender logging in upper level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test11: ConfAppender logging in upper level');
DELETE FROM LOGDATA.REFERENCES;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = 0;
SET LOGGER_NAME = 'Test11';
CALL LOGGER.GET_LOGGER(LOGGER_NAME, LOGGER_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 5
  WHERE LOGGER_ID = LOGGER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN, LEVEL_ID)
  VALUES ('More DB2 Tables-11.1', 1, NULL, '%c [%p] : %m', 2);
SET LAST_CONF_APPENDER_ID = (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS);
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (LOGGER_ID, LAST_CONF_APPENDER_ID);
SET EXPECTED_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
CALL LOGGER.INFO(LOGGER_ID, 'Message test');
SET ACTUAL_QTY = (SELECT COUNT(0) FROM LOGDATA.LOGS);
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Different qty');
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || COALESCE(EXPECTED_QTY, -1) || ' actual ' || COALESCE(ACTUAL_QTY,-1));
END IF;
DELETE FROM LOGDATA.REFERENCES WHERE LOGGER_ID = LOGGER_ID;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONF_APPENDERS WHERE REF_ID = LAST_CONF_APPENDER_ID;
INSERT INTO LOGDATA.CONF_APPENDERS (NAME, APPENDER_ID, CONFIGURATION, PATTERN)
  VALUES ('Tables', 1, NULL, '[%p] %c - %m');
INSERT INTO LOGDATA.REFERENCES (LOGGER_ID, APPENDER_REF_ID)
  VALUES (0, (SELECT MAX(REF_ID) FROM LOGDATA.CONF_APPENDERS));
COMMIT;

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsReferences: Cleaning environment');
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsReferences: Finished succesfully');
COMMIT;

END @

