--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the conf loggers effective table.
 *
 * Version: 2014-04-21 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOG4DB2_CONF_LOGGERS_EFFECTIVE @

SET PATH = LOG4DB2_CONF_LOGGERS_EFFECTIVE @

CREATE SCHEMA LOG4DB2_CONF_LOGGERS_EFFECTIVE @

-- Install

CREATE OR REPLACE FUNCTION GET_MAX_ID(
  ) RETURNS ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
 BEGIN
  DECLARE RET ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  SET RET = (SELECT MAX(LOGGER_ID)
    FROM LOGDATA.CONF_LOGGERS);
  RETURN RET;
 END @

CREATE OR REPLACE PROCEDURE DELETE_LAST_MESSAGE_FROM_TRIGGER()
 BEGIN
  DECLARE MAX_DATE ANCHOR LOGDATA.LOGS.DATE;

  SELECT MAX(DATE) INTO MAX_DATE FROM LOGDATA.LOGS;
  DELETE FROM LOGDATA.LOGS
    WHERE MESSAGE = 'A manual CONF_LOGGERS_EFFECTIVE update should be realized.'
    AND DATE = MAX_DATE;
 END @

-- Test fixtures
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 BEGIN
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'false'
    WHERE KEY = 'internalCache';
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'false'
    WHERE KEY = 'logInternals';
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 3
    WHERE LOGGER_ID = 0;
 END @

CREATE OR REPLACE PROCEDURE SETUP()
 BEGIN
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
 END @

CREATE OR REPLACE PROCEDURE TEAR_DOWN()
 BEGIN
  -- Empty
 END @

CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 BEGIN
  DELETE FROM LOGDATA.CONFIGURATION;
  INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
    VALUES ('autonomousLogging', 'true'),
           ('defaultRootLevelId', '3'),
           ('internalCache', 'true'),
           ('logInternals', 'false'),
           ('secondsToRefresh', '30');
  CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
 END @

-- Test01: Inserts a normal logger.
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T1', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test1', 0, EXPECTED_LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test01: Inserts a normal logger',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test01: Inserts a normal logger',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test01: Inserts a normal logger',
    EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test02: Tries to insert a logger with a null id.
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
    SET RAISED_407 = TRUE;

  SET LEVEL = 2;
  SET HIERARCHY = '0' ;
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (NULL, LEVEL, HIERARCHY);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test02: Tries to insert a logger with a '
    || 'null id', RAISED_407);
 END @

-- Test03: Tries to insert a logger with a negative id.
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE RAISED_530 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23503'
    SET RAISED_530 = TRUE;

  SET LEVEL = 4;
  SET HIERARCHY = '0' ;
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (-5, LEVEL, HIERARCHY);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test03: Tries to insert a logger with a '
    || 'negative id', RAISED_530);
 END @

-- Test04: Tries to insert a logger with a inexistant id.
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE RAISED_530 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23503'
    SET RAISED_530 = TRUE;

  SET LEVEL = 5;
  SET HIERARCHY = '0,500' ;
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (500, LEVEL, HIERARCHY);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test04: Tries to insert a logger with a '
    || 'inexistant id', RAISED_530);
 END @

-- Test05: Tries to insert a logger with a null level.
CREATE OR REPLACE PROCEDURE TEST_05()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T5', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test5', 0, EXPECTED_LEVEL);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, NULL, EXPECTED_HIERARCHY);
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test05: Tries to insert a logger with a null '
    || 'level', EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test05: Tries to insert a logger with a null '
    || 'level', EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test05: Tries to insert a logger with a '
    || 'null level', EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test06: Tries to insert a logger with a negative level.
CREATE OR REPLACE PROCEDURE TEST_06()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T6', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 2;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test6', 0, EXPECTED_LEVEL);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, -1, EXPECTED_HIERARCHY);
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test06: Tries to insert a logger with a '
    || 'negative level', EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test06: Tries to insert a logger with a '
    || 'negative level', EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test06: Tries to insert a logger with a '
    || 'negative level', EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test07: Tries to insert a logger with an inexistant level.
CREATE OR REPLACE PROCEDURE TEST_07()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T7', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 4;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test7', 0, EXPECTED_LEVEL);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, MAX_ID + 5, EXPECTED_HIERARCHY);
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test07: Tries to insert a logger with an '
    || 'inexistant level', EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test07: Tries to insert a logger with an '
    || 'inexistant level', EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test07: Tries to insert a logger with an '
    || 'inexistant level', EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test08: Tries to insert a logger with a null hierarchy.
CREATE OR REPLACE PROCEDURE TEST_08()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
    SET RAISED_407 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T8', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET LOGGER = MAX_ID + 1;
  SET LEVEL = 5;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test8', 0, LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (LOGGER, LEVEL, NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test08: Tries to insert a logger with a '
    || 'null hierarchy', RAISED_407);
 END @

-- Test09: Tries to insert a logger with an empty hierarchy.
CREATE OR REPLACE PROCEDURE TEST_09()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T9', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_HIERARCHY = '';
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test9', 0, EXPECTED_LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test09: Tries to insert a logger with an '
    || 'empty hierarchy', EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test09: Tries to insert a logger with an '
    || 'empty hierarchy', EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test09: Tries to insert a logger with an '
    || 'empty hierarchy', EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test10: Tries to insert a logger with an invalid hierarchy.
CREATE OR REPLACE PROCEDURE TEST_10()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T10', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 2;
  SET EXPECTED_HIERARCHY = 'andres';
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test10', 0, EXPECTED_LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test10: Tries to insert a logger with an '
    || 'invalid hierarchy', EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test10: Tries to insert a logger with an '
    || 'invalid hierarchy', EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test10: Tries to insert a logger with an '
    || 'invalid hierarchy', EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test11: Tries to update the id.
CREATE OR REPLACE PROCEDURE TEST_11()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE RAISED_LG0E1 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E1'
    SET RAISED_LG0E1 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T11', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET LOGGER = MAX_ID + 1;
  SET LEVEL = 4;
  SET HIERARCHY = '0,' || CHAR(LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test11', 0, LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (LOGGER, LEVEL, HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LOGGER_ID = LOGGER
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test11: Tries to update the id',
    RAISED_LG0E1);
 END @

-- Test12: Tries to update the id to root.
CREATE OR REPLACE PROCEDURE TEST_12()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE RAISED_LG0E1 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E1'
    SET RAISED_LG0E1 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T12', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET LOGGER = MAX_ID + 1;
  SET LEVEL = 5;
  SET HIERARCHY = '0,' || CHAR(LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test12', 0, LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (LOGGER, LEVEL, HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LOGGER_ID = 0
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test12: Tries to update the id to root',
    RAISED_LG0E1);
 END @

-- Test13: Tries to update the id to some id.
CREATE OR REPLACE PROCEDURE TEST_13()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE RAISED_LG0E1 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E1'
    SET RAISED_LG0E1 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T13', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET LOGGER = MAX_ID + 1;
  SET LEVEL = 1;
  SET HIERARCHY = '0,' || CHAR(LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test13', 0, LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (LOGGER, LEVEL, HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LOGGER_ID = LOGGER + 5
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test13: Tries to update the id to some id',
    RAISED_LG0E1);
 END @

-- Test14: Tries to update the hierarchy.
CREATE OR REPLACE PROCEDURE TEST_14()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE RAISED_LG0E1 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E1'
    SET RAISED_LG0E1 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T14', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET LOGGER = MAX_ID + 1;
  SET LEVEL = 2;
  SET HIERARCHY = '0,' || CHAR(LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test14', 0, LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (LOGGER, LEVEL, HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET HIERARCHY = '0,1'
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test14: Tries to update the hierarchy',
    RAISED_LG0E1);
 END @

-- Test15: Tries to update the hierarchy to null.
CREATE OR REPLACE PROCEDURE TEST_15()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE RAISED_LG0E1 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E1'
    SET RAISED_LG0E1 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T15', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET LOGGER = MAX_ID + 1;
  SET LEVEL = 4;
  SET HIERARCHY = '0,' || CHAR(LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test15', 0, LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (LOGGER, LEVEL, HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET HIERARCHY = NULL
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test15: Tries to update to null',
    RAISED_LG0E1);
 END @

-- Test16: Tries to update the hierarchy to empty.
CREATE OR REPLACE PROCEDURE TEST_16()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE RAISED_LG0E1 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E1'
    SET RAISED_LG0E1 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T16', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET LOGGER = MAX_ID + 1;
  SET LEVEL = 5;
  SET HIERARCHY = '0,' || CHAR(LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test16', 0, LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (LOGGER, LEVEL, HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET HIERARCHY = ''
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test16: Tries to update to empty',
    RAISED_LG0E1);
 END @

-- Test17: Update the level.
CREATE OR REPLACE PROCEDURE TEST_17()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T17', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test17', 0, EXPECTED_LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = 2
    WHERE LOGGER_ID = EXPECTED_LOGGER;
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test17: Updates the level',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test17: Updates the level',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test17: Updates the level',
    EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test18: Update the level to null.
CREATE OR REPLACE PROCEDURE TEST_18()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T18', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 2;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test18', 0, EXPECTED_LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = EXPECTED_LOGGER;
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test18: Updates the level to null',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test18: Updates the level to null',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test18: Updates the level to null',
    EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test19: Update the level to negative.
CREATE OR REPLACE PROCEDURE TEST_19()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T19', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 4;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test19', 0, EXPECTED_LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = -2
    WHERE LOGGER_ID = EXPECTED_LOGGER;
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test19: Updates the level to negative',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test19: Updates the level to negative',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test19: Updates the level to negative',
    EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test20: Update the level to inexistant.
CREATE OR REPLACE PROCEDURE TEST_20()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T20', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 5;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test20', 0, EXPECTED_LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = 8
    WHERE LOGGER_ID = EXPECTED_LOGGER;
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test20: Updates the level to inexistant',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test20: Updates the level to inexistant',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test20: Updates the level to inexistant',
    EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test21: Update the level to same.
CREATE OR REPLACE PROCEDURE TEST_21()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T21', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test21', 0, EXPECTED_LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = EXPECTED_LOGGER;
  SET MAX_ID = GET_MAX_ID();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test21: Updates the level to same',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test21: Updates the level to same',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test21: Updates the level to same',
    EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test22: Delete one logger.
CREATE OR REPLACE PROCEDURE TEST_22()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_QTY SMALLINT;
  DECLARE EXPECTED_QTY SMALLINT;

  SET MAX_ID = GET_MAX_ID();
  SET LOGGER = MAX_ID + 1;
  SET LEVEL = 2;
  SET HIERARCHY = '0,' || CHAR(LOGGER);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test22', 0, LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (LOGGER, LEVEL, HIERARCHY);
  SELECT COUNT(0) - 1 INTO EXPECTED_QTY
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = LOGGER;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID = LOGGER;
  SELECT COUNT(0) INTO ACTUAL_QTY
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test22: Delete one logger',
    EXPECTED_QTY, ACTUAL_QTY);
 END @

-- Test23: Delete ROOT.
CREATE OR REPLACE PROCEDURE TEST_23()
 BEGIN
  DECLARE RAISED_LG0E2 BOOLEAN DEFAULT FALSE; 
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E2'
    SET RAISED_LG0E2 = TRUE;

  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test23: Delete ROOT', RAISED_LG0E2);
 END @

-- Test24: Delete all but root.
CREATE OR REPLACE PROCEDURE TEST_24()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_QTY SMALLINT;
  DECLARE EXPECTED_QTY SMALLINT;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test24A', 0, 3);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, 3, '0,1');
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test24B', 0, 4);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, 4, '0,1');
  SET EXPECTED_QTY = 0;
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  SELECT COUNT(0) INTO ACTUAL_QTY
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID <> 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test24: Delete all but root',
    EXPECTED_QTY, ACTUAL_QTY);
 END @

-- Test25: Updates root logger changing the default value, value from root.
CREATE OR REPLACE PROCEDURE TEST_25()
 BEGIN
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET EXPECTED_LEVEL = 4;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 4
    WHERE LOGGER_ID = 0;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '2'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test25: Updates ROOT logger changing the '
    || 'default', EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test26: Updates root logger changing the default value, value from root.
CREATE OR REPLACE PROCEDURE TEST_26()
 BEGIN
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET EXPECTED_LEVEL = 1;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '5'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test26: Updates ROOT logger changing the '
    || 'default', EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test27: Updates root logger changing the default value, value from default.
CREATE OR REPLACE PROCEDURE TEST_27()
 BEGIN
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET EXPECTED_LEVEL = 4;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '4'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test27: Updates root logger changing the '
    || 'default', EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test28: Updates a normal logger changing the default value. Nothing happens.
CREATE OR REPLACE PROCEDURE TEST_28()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T28', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 5;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 1
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test28', 0, EXPECTED_LEVEL);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, 3, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '5'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = MAX_ID;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '4'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test28: Updates a normal logger changing the '
    || 'default value', EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test28: Updates a normal logger changing the '
    || 'default value', EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test28: Updates a normal logger changing '
    || 'the default value', EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test29: Updates a normal logger changing the default value, value from root.
CREATE OR REPLACE PROCEDURE TEST_29()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T26', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 5;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test29', 0, NULL);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, NULL, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '2'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = MAX_ID;
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test29: Updates a normal logger changing the '
    || 'default value', EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test29: Updates a normal logger changing the '
    || 'default value', EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test29: Updates a normal logger changing '
    || 'the default value', EXPECTED_HIERARCHY,
    ACTUAL_HIERARCHY);
 END @

-- Test30: Updates a normal logger changing the default value, value from
-- default.
CREATE OR REPLACE PROCEDURE TEST_30()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T30', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 4;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test30', 0, NULL);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, NULL, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '1'
    WHERE KEY = 'defaultRootLevelId';
  CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = MAX_ID;
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test30: Updates a normal logger changing the '
    || 'default value', EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test30: Updates a normal logger changing the '
    || 'default value', EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test30: Updates a normal logger changing '
    || 'the default value', EXPECTED_HIERARCHY,
    ACTUAL_HIERARCHY);
 END @

-- Test31: Tests hierarchy path one level.
CREATE OR REPLACE PROCEDURE TEST_31()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE STRING VARCHAR(32);
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_PATH VARCHAR(64);
  DECLARE EXPECTED_PATH VARCHAR(64);

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T31', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET STRING = 'path1';
  SET EXPECTED_PATH = '0,' || TRIM(CHAR(MAX_ID + 1));
  CALL LOGGER.GET_LOGGER(STRING, LOGGER);
  SELECT TRIM(HIERARCHY) INTO ACTUAL_PATH
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test31: Tests hierarchy path one level',
    EXPECTED_PATH, ACTUAL_PATH);
 END @

-- Test32: Tests hierarchy path two levels.
CREATE OR REPLACE PROCEDURE TEST_32()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE STRING VARCHAR(32);
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_PATH VARCHAR(64);
  DECLARE EXPECTED_PATH VARCHAR(64);

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T32', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET STRING = 'path1.path2';
  SET EXPECTED_PATH = '0,' || TRIM(CHAR(MAX_ID + 1))
    || ',' || TRIM(CHAR(MAX_ID + 2));
  CALL LOGGER.GET_LOGGER(STRING, LOGGER);
  SELECT TRIM(HIERARCHY) INTO ACTUAL_PATH
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test32: Tests hierarchy path two levels',
    EXPECTED_PATH, ACTUAL_PATH);
 END @

-- Test33: Tests hierarchy path three levels.
CREATE OR REPLACE PROCEDURE TEST_33()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE STRING VARCHAR(32);
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_PATH VARCHAR(64);
  DECLARE EXPECTED_PATH VARCHAR(64);

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T33', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET STRING = 'path1.path2.path3';
  SET EXPECTED_PATH = '0,' || TRIM(CHAR(MAX_ID + 1))
    || ',' || TRIM(CHAR(MAX_ID + 2))
    || ',' || TRIM(CHAR(MAX_ID + 3));
  CALL LOGGER.GET_LOGGER(STRING, LOGGER);
  SELECT TRIM(HIERARCHY) INTO ACTUAL_PATH
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test33: Tests hierarchy path three levels',
    EXPECTED_PATH, ACTUAL_PATH);
 END @

-- Test34: Tests hierarchy path other two levels.
CREATE OR REPLACE PROCEDURE TEST_34()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE STRING VARCHAR(32);
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_PATH VARCHAR(64);
  DECLARE EXPECTED_PATH VARCHAR(64);

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T34', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET STRING = 'path1.path2';
  CALL LOGGER.GET_LOGGER(STRING, LOGGER);
  SET STRING = 'path1.path3';
  SET EXPECTED_PATH = '0,' || TRIM(CHAR(MAX_ID + 1))
    || ',' || TRIM(CHAR(MAX_ID + 3));
  CALL LOGGER.GET_LOGGER(STRING, LOGGER);
  SELECT TRIM(HIERARCHY) INTO ACTUAL_PATH
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test34: Tests hierarchy other two levels',
    EXPECTED_PATH, ACTUAL_PATH);
 END @

-- Test35: Tests hierarchy path other one level.
CREATE OR REPLACE PROCEDURE TEST_35()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE STRING VARCHAR(32);
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_PATH VARCHAR(64);
  DECLARE EXPECTED_PATH VARCHAR(64);

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T35', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET STRING = 'path1';
  CALL LOGGER.GET_LOGGER(STRING, LOGGER);
  SET STRING = 'path2';
  SET EXPECTED_PATH = '0,' || TRIM(CHAR(MAX_ID + 2));
  CALL LOGGER.GET_LOGGER(STRING, LOGGER);
  SELECT TRIM(HIERARCHY) INTO ACTUAL_PATH
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test35: Tests hierarchy other one level',
    EXPECTED_PATH, ACTUAL_PATH);
 END @

-- Test36: Updates to null conf_logger. Value from ascendancy.
CREATE OR REPLACE PROCEDURE TEST_36()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T36', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test36', 0, 2);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, 4, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = MAX_ID;
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test36: Updates to null conf_logger. Value '
    || 'from ascendancy', EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test36: Updates to null conf_logger. Value '
    || 'from ascendancy', EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test36: Updates to null conf_logger. '
    || 'Value from ascendancy', EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test37: Updates to not null conf_logger. Value from conf_loggers.
CREATE OR REPLACE PROCEDURE TEST_37()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T37', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 5;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = 4
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test37', 0, NULL);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, 2, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = MAX_ID;
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test36: Updates to not null conf_logger. '
    || 'Value from conf_loggers', EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test36: Updates to not null conf_logger. '
    || 'Value from conf_loggers', EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test36: Updates to not null conf_logger. '
    || 'Value from conf_loggers', EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Test38: Updates to null conf_logger. Value from ascendancy.
CREATE OR REPLACE PROCEDURE TEST_38()
 BEGIN
  DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T38', 0, 0);
  SET MAX_ID = GET_MAX_ID();
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;

  SET EXPECTED_LOGGER = MAX_ID + 1;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test38', 0, 2);
  SET MAX_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
    VALUES (MAX_ID, 4, EXPECTED_HIERARCHY);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = NULL
    WHERE LOGGER_ID = MAX_ID;
  SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL,
    ACTUAL_HIERARCHY FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = MAX_ID;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test38: Updates to null conf_logger. Value from ascendancy',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test38: Updates to null conf_logger. Value from ascendancy',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_STRING_EQUALS('Test38: Updates to null conf_logger. Value from ascendancy',
    EXPECTED_HIERARCHY, ACTUAL_HIERARCHY);
 END @

-- Register the suite.
CALL DB2UNIT.REGISTER_SUITE(CURRENT SCHEMA) @

