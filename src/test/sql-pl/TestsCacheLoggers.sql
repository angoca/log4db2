--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the logger cache functionality for logger.
 *
 * Version: 2014-04-21 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOGGER_1RC @

SET PATH = "SYSIBM", "SYSFUN", "SYSPROC", "SYSIBMADM", LOGGER_1RC @

ALTER MODULE LOGGER DROP TYPE LOGGERS_ROW @

ALTER MODULE LOGGER PUBLISH
  TYPE LOGGERS_ROW AS ROW (
  NAME ANCHOR COMPLETE_LOGGER_NAME,
  LEVEL_ID ANCHOR LOGDATA.LEVELS.LEVEL_ID,
  HIERARCHY ANCHOR LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY) @

BEGIN
DECLARE QUERY VARCHAR(4096);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsCacheLevel: Preparing environment');
-- Extract the private function and publish it.
SELECT
  REPLACE
   (REPLACE
    (REPLACE
     (REPLACE
      (REPLACE
       (BODY,
       'ALTER MODULE LOGGER ADD',
       'ALTER MODULE LOGGER PUBLISH'),
      'FUNCTION GET_LOGGER_DATA',
      'FUNCTION GET_LOGGER_DATA2'),
     'SPECIFIC F_GET_LOGGER_DATA',
     'SPECIFIC F_GET_LOGGER_DATA2'),
    'F_GET_LOGGER_DATA: BEGIN',
    'F_GET_LOGGER_DATA2: BEGIN'),
   'END F_GET_LOGGER_DATA',
   'END F_GET_LOGGER_DATA2')
  INTO QUERY
  FROM SYSCAT.FUNCTIONS
  WHERE FUNCNAME LIKE 'GET_LOGGER_DATA'
  AND FUNCSCHEMA LIKE 'LOGGER_1B%';
EXECUTE IMMEDIATE QUERY;

SELECT
  REPLACE
   (REPLACE
    (REPLACE
     (REPLACE
      (REPLACE
       (BODY,
       'ALTER MODULE LOGGER ADD',
       'ALTER MODULE LOGGER PUBLISH'),
      'FUNCTION GET_LOGGER_NAME',
      'FUNCTION GET_LOGGER_NAME2'),
     'SPECIFIC F_GET_LOGGER_NAME',
     'SPECIFIC F_GET_LOGGER_NAME2'),
    'F_GET_LOGGER_NAME: BEGIN',
    'F_GET_LOGGER_NAME2: BEGIN'),
   'END F_GET_LOGGER_NAME',
   'END F_GET_LOGGER_NAME2')
  INTO QUERY
  FROM SYSCAT.FUNCTIONS
  WHERE FUNCNAME LIKE 'GET_LOGGER_NAME'
  AND FUNCSCHEMA LIKE 'LOGGER_1B%';
EXECUTE IMMEDIATE QUERY;
END@

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '00000';

DECLARE LOG_ID ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
DECLARE EXPECTED_HIERARCHY ANCHOR LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
DECLARE EXPECTED_LEVEL_ID ANCHOR LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE EXPECTED_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
DECLARE ACTUAL_HIERARCHY ANCHOR LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
DECLARE ACTUAL_LEVEL_ID ANCHOR LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE ACTUAL_NAME ANCHOR LOGDATA.CONF_LOGGERS.NAME;
DECLARE RET LOGGER.LOGGERS_ROW;

-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
CALL LOGGER.DEACTIVATE_CACHE();
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
COMMIT;

-- Test01: Test GetLoggerName with cache old.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test01: Test GetLoggerName with cache old');
SET LOG_ID = 1;
SET EXPECTED_NAME = 'LEV01';
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LOG_ID, EXPECTED_NAME, 0, NULL);
SET ACTUAL_NAME = LOGGER.GET_LOGGER_NAME2(LOG_ID);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test02: Test GetLoggerName with cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test02: Test GetLoggerName with cache');
SET LOG_ID = 2;
SET EXPECTED_NAME = 'LEV02';
CALL LOGGER.ACTIVATE_CACHE();
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LOG_ID, EXPECTED_NAME, 0, NULL);
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_NAME = LOGGER.GET_LOGGER_NAME2(LOG_ID);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test03: Test GetLoggerName without cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test03: Test GetLoggerName without cache');
SET LOG_ID = 3;
SET EXPECTED_NAME = 'LEV03';
CALL LOGGER.DEACTIVATE_CACHE();
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LOG_ID, EXPECTED_NAME, 0, NULL);
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_NAME = LOGGER.GET_LOGGER_NAME2(LOG_ID);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test04: Test GetLoggerData with cache old.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test04: Test GetLoggerData with cache old');
SET LOG_ID = 4;
SET EXPECTED_NAME = 'LEV04';
SET EXPECTED_LEVEL_ID = 1;
SET EXPECTED_HIERARCHY = '0,' || LOG_ID;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LOG_ID, EXPECTED_NAME, 0, EXPECTED_LEVEL_ID);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
  VALUES (LOG_ID, EXPECTED_LEVEL_ID, EXPECTED_HIERARCHY);
SET RET = LOGGER.GET_LOGGER_DATA2(LOG_ID);
SET ACTUAL_LEVEL_ID = RET.LEVEL_ID;
SET ACTUAL_HIERARCHY = RET.HIERARCHY;
SET ACTUAL_NAME = RET.NAME;
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
IF (EXPECTED_LEVEL_ID <> ACTUAL_LEVEL_ID) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_LEVEL_ID, -1) || ' - actual ' || COALESCE(ACTUAL_LEVEL_ID, -1));
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_HIERARCHY, '-') || ' - actual ' || COALESCE(ACTUAL_HIERARCHY, '-'));
END IF;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test05: Test GetLoggerData with cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test05: Test GetLoggerData with cache');
SET LOG_ID = 5;
SET EXPECTED_NAME = 'LEV05';
SET EXPECTED_HIERARCHY = '0,' || LOG_ID;
SET EXPECTED_LEVEL_ID = 2;
CALL LOGGER.ACTIVATE_CACHE();
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LOG_ID, EXPECTED_NAME, 0, EXPECTED_LEVEL_ID);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
  VALUES (LOG_ID, EXPECTED_LEVEL_ID, EXPECTED_HIERARCHY);
CALL LOGGER.REFRESH_CACHE();
SET RET = LOGGER.GET_LOGGER_DATA2(LOG_ID);
SET ACTUAL_LEVEL_ID = RET.LEVEL_ID;
SET ACTUAL_HIERARCHY = RET.HIERARCHY;
SET ACTUAL_NAME = RET.NAME;
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
IF (EXPECTED_LEVEL_ID <> ACTUAL_LEVEL_ID) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_LEVEL_ID, -1) || ' - actual ' || COALESCE(ACTUAL_LEVEL_ID, -1));
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_HIERARCHY, '-') || ' - actual ' || COALESCE(ACTUAL_HIERARCHY, '-'));
END IF;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test06: Test GetLoggerData without cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test06: Test GetLoggerData without cache');
SET LOG_ID = 6;
SET EXPECTED_NAME = 'LEV06';
SET EXPECTED_HIERARCHY = '0,' || LOG_ID;
SET EXPECTED_LEVEL_ID = 4;
CALL LOGGER.DEACTIVATE_CACHE();
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LOG_ID, EXPECTED_NAME, 0, EXPECTED_LEVEL_ID);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
  VALUES (LOG_ID, EXPECTED_LEVEL_ID, EXPECTED_HIERARCHY);
CALL LOGGER.REFRESH_CACHE();
SET RET = LOGGER.GET_LOGGER_DATA2(LOG_ID);
SET ACTUAL_LEVEL_ID = RET.LEVEL_ID;
SET ACTUAL_HIERARCHY = RET.HIERARCHY;
SET ACTUAL_NAME = RET.NAME;
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
IF (EXPECTED_LEVEL_ID <> ACTUAL_LEVEL_ID) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_LEVEL_ID, -1) || ' - actual ' || COALESCE(ACTUAL_LEVEL_ID, -1));
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_HIERARCHY, '-') || ' - actual ' || COALESCE(ACTUAL_HIERARCHY, '-'));
END IF;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test07: Test GetLoggerName inexistant with cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test07: Test GetLoggerName inexistant with cache');
SET LOG_ID = 7;
SET EXPECTED_NAME = 'Unknown';
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_NAME = LOGGER.GET_LOGGER_NAME2(LOG_ID);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test08: Test GetLoggerData inexistant with cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test08: Test GetLoggerData inexistant with cache');
SET LOG_ID = 8;
SET EXPECTED_NAME = 'Unknown';
SET EXPECTED_LEVEL_ID = NULL;
SET EXPECTED_HIERARCHY = NULL;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET RET = LOGGER.GET_LOGGER_DATA2(LOG_ID);
SET ACTUAL_LEVEL_ID = RET.LEVEL_ID;
SET ACTUAL_HIERARCHY = RET.HIERARCHY;
SET ACTUAL_NAME = RET.NAME;
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
IF (EXPECTED_LEVEL_ID <> ACTUAL_LEVEL_ID) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_LEVEL_ID, -1) || ' - actual ' || COALESCE(ACTUAL_LEVEL_ID, -1));
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_HIERARCHY, '-') || ' - actual ' || COALESCE(ACTUAL_HIERARCHY, '-'));
END IF;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test09: Test GetLoggerName ROOT with cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test09: Test GetLoggerName ROOT with cache');
SET LOG_ID = 0;
SET EXPECTED_NAME = 'ROOT';
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_NAME = LOGGER.GET_LOGGER_NAME2(LOG_ID);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test10: Test GetLoggerName ROOT without cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test1O: Test GetLoggerName ROOT without cache');
SET LOG_ID = 0;
SET EXPECTED_NAME = 'ROOT';
CALL LOGGER.DEACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_NAME = LOGGER.GET_LOGGER_NAME2(LOG_ID);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test11: Test GetLoggerData ROOT with cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test11: Test GetLoggerData ROOT with cache');
SET LOG_ID = 0;
SET EXPECTED_NAME = 'ROOT';
SET EXPECTED_HIERARCHY = LOG_ID;
SET EXPECTED_LEVEL_ID = 3;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET RET = LOGGER.GET_LOGGER_DATA2(LOG_ID);
SET ACTUAL_LEVEL_ID = RET.LEVEL_ID;
SET ACTUAL_HIERARCHY = RET.HIERARCHY;
SET ACTUAL_NAME = RET.NAME;
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
IF (EXPECTED_LEVEL_ID <> ACTUAL_LEVEL_ID) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_LEVEL_ID, -1) || ' - actual ' || COALESCE(ACTUAL_LEVEL_ID, -1));
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_HIERARCHY, '-') || ' - actual ' || COALESCE(ACTUAL_HIERARCHY, '-'));
END IF;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test12: Test GetLoggerData ROOT without cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test12: Test GetLoggerData ROOT without cache');
SET LOG_ID = 0;
SET EXPECTED_NAME = 'ROOT';
SET EXPECTED_HIERARCHY = LOG_ID;
SET EXPECTED_LEVEL_ID = 3;
CALL LOGGER.DEACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET RET = LOGGER.GET_LOGGER_DATA2(LOG_ID);
SET ACTUAL_LEVEL_ID = RET.LEVEL_ID;
SET ACTUAL_HIERARCHY = RET.HIERARCHY;
SET ACTUAL_NAME = RET.NAME;
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
IF (EXPECTED_LEVEL_ID <> ACTUAL_LEVEL_ID) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_LEVEL_ID, -1) || ' - actual ' || COALESCE(ACTUAL_LEVEL_ID, -1));
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_HIERARCHY, '-') || ' - actual ' || COALESCE(ACTUAL_HIERARCHY, '-'));
END IF;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test13: Test GetLoggerName INTERNAL without cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test13: Test GetLoggerName INTERNAL without cache');
SET LOG_ID = -1;
SET EXPECTED_NAME = '-internal-';
CALL LOGGER.DEACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_NAME = LOGGER.GET_LOGGER_NAME2(LOG_ID);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test14: Test GetLoggerName null.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test14: Test GetLoggerName null');
SET LOG_ID = NULL;
SET EXPECTED_NAME = '-internal-';
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_NAME = LOGGER.GET_LOGGER_NAME2(LOG_ID);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test15: Test GetLoggerData NULL without cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test15: Test GetLoggerData NULL without cache');
SET LOG_ID = NULL;
SET EXPECTED_NAME = '-internal-';
SET EXPECTED_HIERARCHY = LOG_ID;
SET EXPECTED_LEVEL_ID = -1;
CALL LOGGER.ACTIVATE_CACHE();
CALL LOGGER.REFRESH_CACHE();
SET RET = LOGGER.GET_LOGGER_DATA2(LOG_ID);
SET ACTUAL_LEVEL_ID = RET.LEVEL_ID;
SET ACTUAL_HIERARCHY = RET.HIERARCHY;
SET ACTUAL_NAME = RET.NAME;
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
IF (EXPECTED_LEVEL_ID <> ACTUAL_LEVEL_ID) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_LEVEL_ID, -1) || ' - actual ' || COALESCE(ACTUAL_LEVEL_ID, -1));
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_HIERARCHY, '-') || ' - actual ' || COALESCE(ACTUAL_HIERARCHY, '-'));
END IF;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test16: Test GetLoggerName two levels with cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test16: Test GetLoggerName two levels with cache');
SET LOG_ID = 17;
SET EXPECTED_NAME = 'LEV16A.LEV16B';
CALL LOGGER.ACTIVATE_CACHE();
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (16, 'LEV16A', 0, NULL);
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LOG_ID, 'LEV16B', 16, NULL);
CALL LOGGER.REFRESH_CACHE();
SET ACTUAL_NAME = LOGGER.GET_LOGGER_NAME2(LOG_ID);
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Test17: Test GetLoggerData two levels with cache.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test17: Test GetLoggerData two levels with cache');
SET LOG_ID = 18;
SET EXPECTED_NAME = 'LEV17A.LEV17B';
SET EXPECTED_HIERARCHY = '0,17,' || LOG_ID;
SET EXPECTED_LEVEL_ID = 2;
CALL LOGGER.ACTIVATE_CACHE();
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (17, 'LEV17A', 0, NULL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
  VALUES (17, 3, '0,17,');
INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
  VALUES (LOG_ID, 'LEV17B', 17, EXPECTED_LEVEL_ID);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY)
  VALUES (LOG_ID, EXPECTED_LEVEL_ID, EXPECTED_HIERARCHY);
CALL LOGGER.REFRESH_CACHE();
SET RET = LOGGER.GET_LOGGER_DATA2(LOG_ID);
SET ACTUAL_LEVEL_ID = RET.LEVEL_ID;
SET ACTUAL_HIERARCHY = RET.HIERARCHY;
SET ACTUAL_NAME = RET.NAME;
IF (EXPECTED_NAME <> ACTUAL_NAME) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different NAME');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_NAME, 'NULL') || ' - actual ' || COALESCE(ACTUAL_NAME, 'NULL'));
END IF;
IF (EXPECTED_LEVEL_ID <> ACTUAL_LEVEL_ID) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_LEVEL_ID, -1) || ' - actual ' || COALESCE(ACTUAL_LEVEL_ID, -1));
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Expected ' || COALESCE(EXPECTED_HIERARCHY, '-') || ' - actual ' || COALESCE(ACTUAL_HIERARCHY, '-'));
END IF;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
CALL LOGGER.REFRESH_CACHE();
COMMIT;

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsCacheLevel: Cleaning environment');
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
DELETE FROM LOGDATA.CONFIGURATION;
INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
  VALUES ('autonomousLogging', 'false'),
         ('defaultRootLevelId', '3'),
         ('internalCache', 'true'),
         ('logInternals', 'false'),
         ('secondsToRefresh', '30');
CALL LOGGER.ACTIVATE_CACHE();
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsCacheLevel: Finished succesfully');
COMMIT;

END @

ALTER MODULE LOGGER
  DROP FUNCTION GET_LOGGER_DATA2 @

ALTER MODULE LOGGER
  DROP FUNCTION GET_LOGGER_NAME2 @

ALTER MODULE LOGGER DROP TYPE LOGGERS_ROW @

ALTER MODULE LOGGER ADD
  TYPE LOGGERS_ROW AS ROW (
  NAME ANCHOR COMPLETE_LOGGER_NAME,
  LEVEL_ID ANCHOR LOGDATA.LEVELS.LEVEL_ID,
  HIERARCHY ANCHOR LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY) @

