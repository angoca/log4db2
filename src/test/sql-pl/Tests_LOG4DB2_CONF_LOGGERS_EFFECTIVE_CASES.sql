--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the conf loggers effective table with the 16 possible cases.
 *
 * Version: 2022-06-07 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOG4DB2_CONF_LOGGERS_EFFECTIVE_CASES @

SET PATH = LOG4DB2_CONF_LOGGERS_EFFECTIVE_CASES, LOGGER_1 @

BEGIN
 DECLARE STATEMENT VARCHAR(128);
 DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' BEGIN END;
 SET STATEMENT = 'CREATE SCHEMA LOG4DB2_CONF_LOGGERS_EFFECTIVE_CASES';
 EXECUTE IMMEDIATE STATEMENT;
END @

CREATE OR REPLACE PROCEDURE DELETE_LAST_MESSAGE_FROM_TRIGGER()
 BEGIN
  DECLARE MAX_DATE ANCHOR LOGDATA.LOGS.DATE_UNIQ;

  SELECT MAX(DATE_UNIQ) INTO MAX_DATE FROM LOGDATA.LOGS;
  DELETE FROM LOGDATA.LOGS
    WHERE MESSAGE = 'A manual CONF_LOGGERS_EFFECTIVE update should be realized.'
    AND DATE_UNIQ = MAX_DATE;
 END @

-- Test fixtures
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 BEGIN
  CALL DB2UNIT.SET_AUTONOMOUS(FALSE);
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'false'
    WHERE KEY = 'internalCache';
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'false'
    WHERE KEY = 'logInternals';
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 3
    WHERE LOGGER_ID = 0;
 END @

CREATE OR REPLACE PROCEDURE SETUP()
 BEGIN
  DELETE FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
  CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
  CALL LOGGER.REFRESH_CACHE();
 END @

CREATE OR REPLACE PROCEDURE TEAR_DOWN()
 BEGIN
  -- Empty
 END @

CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 BEGIN
  CALL LOGGER_1.LOGADMIN.RESET_TABLES();
  CALL DELETE_LAST_MESSAGE_FROM_TRIGGER();
 END @

-- Install

CREATE OR REPLACE FUNCTION GET_MAX_ID(
  ) RETURNS ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
 BEGIN
  DECLARE RET ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  SET RET = (SELECT MAX(LOGGER_ID)
    FROM LOGDATA.CONF_LOGGERS);
  RETURN RET;
 END @

-- Tests

-- Test01: Test update Conf_loggers 1. Root update 1 -> 2
-- CL   CLE   CL  CLE
--  0 1  0 1   0 2  0 2
--  |    |     |    |
--  o    0 1   o    0 2
--  |    |     |    |
--  o    0 1   o    0 2
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = 1;
  SET INITIAL_PARENT = NULL;
  SET INITIAL_SON = NULL;
  SET EXPECTED_LEVEL = 2;
  SET EXPECTED_ROOT = 2;
  SET EXPECTED_PARENT = 2;
  SET EXPECTED_SON = 2;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test01p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test01s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test01: Test update Conf_loggers 1. Root update 1 -> 2');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test02: Test update Conf_loggers 2. Root update 2 -> 5
-- CL   CLE   CL  CLE
--  0 2  0 2   0 5  0 5
--  |    |     |    |
--  o    0 2   o    0 5
--  |    |     |    |
--  0 4  0 4   0 4  0 4
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = 2;
  SET INITIAL_PARENT = NULL;
  SET INITIAL_SON = 4;
  SET EXPECTED_LEVEL = 5;
  SET EXPECTED_ROOT = 5;
  SET EXPECTED_PARENT = 5;
  SET EXPECTED_SON = 4;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test02p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test02s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test02: Test update Conf_loggers 2. Root update 2 -> 5');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test03: Test update Conf_loggers 3. Parent update 1 -> 4
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   0 4  0 4
--  |    |     |    |
--  o    0 1   o    0 4
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = NULL;
  SET INITIAL_PARENT = 1;
  SET INITIAL_SON = NULL;
  SET EXPECTED_LEVEL = 4;
  SET EXPECTED_ROOT = 3;
  SET EXPECTED_PARENT = 4;
  SET EXPECTED_SON = 4;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test03p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test03s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = PARENT;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test03: Test update Conf_loggers 3. Parent update 1 -> 4');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test04: Test update Conf_loggers 4. Son update 2 -> 4
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   0 1  0 1
--  |    |     |    |
--  0 2  0 2   0 4  0 4
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = NULL;
  SET INITIAL_PARENT = 1;
  SET INITIAL_SON = 2;
  SET EXPECTED_LEVEL = 4;
  SET EXPECTED_ROOT = 3;
  SET EXPECTED_PARENT = 1;
  SET EXPECTED_SON = 4;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test04p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test04s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = SON_ID;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test04: Test update Conf_loggers 4. Son update 2 -> 4');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test05: Test update Conf_loggers 5. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
CREATE OR REPLACE PROCEDURE TEST_05()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = 1;
  SET INITIAL_PARENT = NULL;
  SET INITIAL_SON = NULL;
  SET EXPECTED_LEVEL = NULL;
  SET EXPECTED_ROOT = 3;
  SET EXPECTED_PARENT = 3;
  SET EXPECTED_SON = 3;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test05p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test05s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test05: Test update Conf_loggers 5. Root update 1 -> NULL');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test06: Test update Conf_loggers 6. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
--  |    |     |    |
--  o    0 2   o    0 2
CREATE OR REPLACE PROCEDURE TEST_06()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = 1;
  SET INITIAL_PARENT = 2;
  SET INITIAL_SON = NULL;
  SET EXPECTED_LEVEL = NULL;
  SET EXPECTED_ROOT = 3;
  SET EXPECTED_PARENT = 2;
  SET EXPECTED_SON = 2;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test06p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test06s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test06: Test update Conf_loggers 6. Root update 1 -> NULL');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test07: Test update Conf_loggers 7. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
--  |    |     |    |
--  0 4  0 4   0 4  0 4
CREATE OR REPLACE PROCEDURE TEST_07()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = 1;
  SET INITIAL_PARENT = 2;
  SET INITIAL_SON = 4;
  SET EXPECTED_LEVEL = NULL;
  SET EXPECTED_ROOT = 3;
  SET EXPECTED_PARENT = 2;
  SET EXPECTED_SON = 4;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test07p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test07s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test07: Test update Conf_loggers 7. Root update 1 -> NULL');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test08: Test update Conf_loggers 8. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
CREATE OR REPLACE PROCEDURE TEST_08()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = 1;
  SET INITIAL_PARENT = NULL;
  SET INITIAL_SON = 2;
  SET EXPECTED_LEVEL = NULL;
  SET EXPECTED_ROOT = 3;
  SET EXPECTED_PARENT = 3;
  SET EXPECTED_SON = 2;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test08p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test08s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test08: Test update Conf_loggers 8. Root update 1 -> NULL');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test09: Test update Conf_loggers 9. Parent update 1 -> NULL
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
CREATE OR REPLACE PROCEDURE TEST_09()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = NULL;
  SET INITIAL_PARENT = 1;
  SET INITIAL_SON = NULL;
  SET EXPECTED_LEVEL = NULL;
  SET EXPECTED_ROOT = 3;
  SET EXPECTED_PARENT = 3;
  SET EXPECTED_SON = 3;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test09p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test09s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = PARENT;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test09: Test update Conf_loggers 9. Parent update 1 -> NULL');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test10: Test update Conf_loggers 10. Parent update 1 -> NULL
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
CREATE OR REPLACE PROCEDURE TEST_10()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = NULL;
  SET INITIAL_PARENT = 1;
  SET INITIAL_SON = 2;
  SET EXPECTED_LEVEL = NULL;
  SET EXPECTED_ROOT = 3;
  SET EXPECTED_PARENT = 3;
  SET EXPECTED_SON = 2;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test10p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test10s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = PARENT;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test10: Test update Conf_loggers 10. Parent update 1 -> NULL');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test11: Test update Conf_loggers 11. Parent update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  o    0 3   0 1  0 1
--  |    |     |    |
--  o    0 3   o    0 1
CREATE OR REPLACE PROCEDURE TEST_11()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = NULL;
  SET INITIAL_PARENT = NULL;
  SET INITIAL_SON = NULL;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_ROOT = 3;
  SET EXPECTED_PARENT = 1;
  SET EXPECTED_SON = 1;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test11p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test11s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = PARENT;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test11: Test update Conf_loggers 11. Parent update NULL -> 1');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test12: Test update Conf_loggers 12. Parent update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  o    0 3   0 1  0 1
--  |    |     |    |
--  0 2  0 2   0 2  0 2
CREATE OR REPLACE PROCEDURE TEST_12()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = NULL;
  SET INITIAL_PARENT = NULL;
  SET INITIAL_SON = 2;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_ROOT = 3;
  SET EXPECTED_PARENT = 1;
  SET EXPECTED_SON = 2;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test12p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test12s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = PARENT;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test12: Test update Conf_loggers 12. Parent update NULL -> 1');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test13: Test update Conf_loggers 13. ROOT update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   0 1  0 1
--  |    |     |    |
--  o    0 3   o    0 1
--  |    |     |    |
--  o    0 3   o    0 1
CREATE OR REPLACE PROCEDURE TEST_13()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = NULL;
  SET INITIAL_PARENT = NULL;
  SET INITIAL_SON = NULL;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_ROOT = 1;
  SET EXPECTED_PARENT = 1;
  SET EXPECTED_SON = 1;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test13p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test13s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test13: Test update Conf_loggers 13. ROOT update NULL -> 1');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test14: Test update Conf_loggers 14. ROOT update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   0 1  0 1
--  |    |     |    |
--  0 2  0 2   0 2  0 2
--  |    |     |    |
--  o    0 2   o    0 2
CREATE OR REPLACE PROCEDURE TEST_14()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = NULL;
  SET INITIAL_PARENT = 2;
  SET INITIAL_SON = NULL;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_ROOT = 1;
  SET EXPECTED_PARENT = 2;
  SET EXPECTED_SON = 2;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test14p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test14s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test14: Test update Conf_loggers 14. ROOT update NULL -> 1');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test15: Test update Conf_loggers 15. ROOT update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   0 1  0 1
--  |    |     |    |
--  o    0 3   o    0 1
--  |    |     |    |
--  0 2  0 2   0 2  0 2
CREATE OR REPLACE PROCEDURE TEST_15()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET INITIAL_ROOT = NULL;
  SET INITIAL_PARENT = NULL;
  SET INITIAL_SON = 2;
  SET EXPECTED_LEVEL = 1;
  SET EXPECTED_ROOT = 1;
  SET EXPECTED_PARENT = 1;
  SET EXPECTED_SON = 2;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test15p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test15s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;

  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test15: Test update Conf_loggers 15. ROOT update NULL -> 1');
  IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  END IF;
  IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  END IF;
  IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  END IF;
 END @

-- Test16: Test update Conf_loggers 16. Default update.
-- CL   CLE   CL   CLE
--  o    0 3   o    0 2
--  |    |     |    |
--  o    0 3   o    0 2
--  |    |     |    |
--  o    0 3   o    0 2
CREATE OR REPLACE PROCEDURE TEST_16()
 BEGIN
  DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
  DECLARE EXPECTED_MSG ANCHOR LOGDATA.LOGS.MESSAGE;
  DECLARE ACTUAL_MSG ANCHOR LOGDATA.LOGS.MESSAGE;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;

  SET EXPECTED_MSG = 'A manual CONF_LOGGERS_EFFECTIVE update should be realized.';
  SET INITIAL_ROOT = NULL;
  SET INITIAL_PARENT = NULL;
  SET INITIAL_SON = NULL;
  SET EXPECTED_ROOT = 2;
  SET EXPECTED_PARENT = 2;
  SET EXPECTED_SON = 2;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = INITIAL_ROOT
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test16p', 0, INITIAL_PARENT);
  SET PARENT = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (PARENT, INITIAL_PARENT, '0,' || PARENT);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
    ('test16s', PARENT, INITIAL_SON);
  SET SON_ID = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
    (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
  UPDATE LOGDATA.CONFIGURATION SET VALUE = '2' WHERE KEY = 'defaultRootLevelId';
  SELECT MESSAGE INTO ACTUAL_MSG
    FROM LOGS
    WHERE DATE_UNIQ = (SELECT MAX(DATE_UNIQ)
      FROM LOGS);

  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test16: Test update Conf_loggers 16. Default update');
  IF (EXPECTED_MSG <> ACTUAL_MSG) THEN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES
     (2, 'Different msg');
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES
     (2, 'Expected "' || COALESCE(EXPECTED_MSG, '-') || '" actual "' || COALESCE(ACTUAL_MSG, '-') || '"');
  END IF;
  DELETE FROM LOGDATA.LOGS
    WHERE MESSAGE = EXPECTED_MSG
    AND DATE_UNIQ = (SELECT MAX(DATE_UNIQ) FROM LOGDATA.LOGS);
    
  -- The following does not work, because the trigger cannot update Effective.
  --SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
  --SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
  --SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;

  --IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
  -- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
  -- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
  --END IF;
  --IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
  -- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
  -- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
  --END IF;
  --IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
  -- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
  -- INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
  --END IF;
 END @

-- Register the suite.
CALL DB2UNIT.REGISTER_SUITE(CURRENT SCHEMA) @

