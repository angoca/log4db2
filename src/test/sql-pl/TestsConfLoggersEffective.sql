--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the conf loggers effective table.
 */

SET CURRENT SCHEMA LOGGER_1B @

SET PATH = "SYSIBM", "SYSFUN", "SYSPROC", "SYSIBMADM", LOGGER_1B @

CREATE OR REPLACE FUNCTION GET_MAX_ID()
  RETURNS ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
 BEGIN
  DECLARE RET ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  SET RET = (SELECT MAX(LOGGER_ID)
    FROM LOGDATA.CONF_LOGGERS);
  RETURN RET;
 END @

BEGIN
-- Reserved names for errors.
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE SQLSTATE CHAR(5) DEFAULT '00000';

DECLARE RAISED_LG0E1 BOOLEAN DEFAULT FALSE; -- Logger without parent.
DECLARE RAISED_LG0E2 BOOLEAN DEFAULT FALSE; -- Modifying values.
DECLARE RAISED_LGAE3 BOOLEAN DEFAULT FALSE; -- Modifying level_id.
DECLARE RAISED_LGBE3 BOOLEAN DEFAULT FALSE; -- Modifying level_id.
DECLARE RAISED_LG0E4 BOOLEAN DEFAULT FALSE; -- ROOT logger should always exist.
DECLARE RAISED_LG0E5 BOOLEAN DEFAULT FALSE; -- Just one ROOT.
DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
DECLARE RAISED_530 BOOLEAN DEFAULT FALSE; -- Foreign key.
DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE ACTUAL_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
DECLARE ACTUAL_QTY SMALLINT;
DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE EXPECTED_HIERARCHY ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.HIERARCHY;
DECLARE EXPECTED_QTY SMALLINT;
DECLARE INITIAL_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE INITIAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE INITIAL_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE EXPECTED_ROOT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE EXPECTED_SON ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LEVEL_ID;
DECLARE MAX_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
DECLARE SON_ID ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS_EFFECTIVE.LOGGER_ID;
DECLARE STRING VARCHAR(32);
DECLARE ACTUAL_PATH VARCHAR(64);
DECLARE EXPECTED_PATH VARCHAR(64);


-- Controlled SQL State.
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E1'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E1 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E2'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E2 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LGAE3'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (1, 'SQLState ' || SQLSTATE);
   SET RAISED_LGAE3 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LGBE3'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (1, 'SQLState ' || SQLSTATE);
   SET RAISED_LGBE3 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E4'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E4 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0E5'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (1, 'SQLState ' || SQLSTATE);
   SET RAISED_LG0E5 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE '23503'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_530 = TRUE;
  END;
DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
  BEGIN
   INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'SQLState ' || SQLSTATE);
   SET RAISED_407 = TRUE;
  END;

-- For any other SQL State.
DECLARE CONTINUE HANDLER FOR SQLWARNING
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Warning SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Exception SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);
DECLARE CONTINUE HANDLER FOR NOT FOUND
  INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Not found SQLCode ' || SQLCODE || '-SQLState ' || SQLSTATE);

-- Prepares the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLoggersEffective: Preparing environment');
SET RAISED_LG0E1 = FALSE;
SET RAISED_LG0E2 = FALSE;
SET RAISED_LGAE3 = FALSE;
SET RAISED_LGBE3 = FALSE;
SET RAISED_LG0E4 = FALSE;
SET RAISED_LG0E5 = FALSE;
SET RAISED_530 = FALSE;
SET RAISED_407 = FALSE;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '3'
  WHERE KEY = 'defaultRootLevelId';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'internalCache';
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = 'false'
  WHERE KEY = 'logInternals';
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 3
  WHERE LOGGER_ID = 0;
COMMIT;

-- Test01: Inserts a normal logger.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test01: Inserts a normal logger');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T1', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test1', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test02: Tries to insert a logger with a null id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test02: Tries to insert a logger with a null id');
SET EXPECTED_LEVEL = 2;
SET EXPECTED_HIERARCHY = '0' ;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (NULL, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
IF (RAISED_407 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised 407');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised 407');
END IF;
SET RAISED_407 = FALSE;
COMMIT;

-- Test03: Tries to insert a logger with a negative id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test03: Tries to insert a logger with a negative id');
SET EXPECTED_LEVEL = 4;
SET EXPECTED_HIERARCHY = '0' ;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (-5, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
IF (RAISED_530 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised 503');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised 503');
END IF;
SET RAISED_530 = FALSE;
COMMIT;

-- Test04: Tries to insert a logger with a inexistant id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test04: Tries to insert a logger with a inexistant id');
SET EXPECTED_LEVEL = 5;
SET EXPECTED_HIERARCHY = '0,500' ;
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (500, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
IF (RAISED_530 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised 503');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised 503');
END IF;
SET RAISED_530 = FALSE;
COMMIT;

-- Test05: Tries to insert a logger with a null level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test05: Tries to insert a logger with a null level');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T5', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test5', 0, EXPECTED_LEVEL);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, NULL, EXPECTED_HIERARCHY);
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test06: Tries to insert a logger with a negative level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test06: Tries to insert a logger with a negative level');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T6', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 2;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test6', 0, EXPECTED_LEVEL);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, -1, EXPECTED_HIERARCHY);
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test07: Tries to insert a logger with an inexistant level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test07: Tries to insert a logger with an inexistant level');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T7', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 4;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test7', 0, EXPECTED_LEVEL);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, MAX_ID + 5, EXPECTED_HIERARCHY);
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test08: Tries to insert a logger with a null hierarchy.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test08: Tries to insert a logger with a null hierarchy');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T8', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 5;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test8', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, NULL);
IF (RAISED_407 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised 407');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised 407');
END IF;
SET RAISED_407 = FALSE;
COMMIT;

-- Test09: Tries to insert a logger with an empty hierarchy.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test09: Tries to insert a logger with an empty hierarchy');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T9', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_HIERARCHY = '';
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test9', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test10: Tries to insert a logger with an invalid hierarchy.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test10: Tries to insert a logger with an invalid hierarchy');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T10', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 2;
SET EXPECTED_HIERARCHY = 'andres';
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test10', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test11: Tries to update the id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test11: Tries to update the id');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T11', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 4;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test11', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LOGGER_ID = EXPECTED_LOGGER
  WHERE LOGGER_ID = EXPECTED_LOGGER;
IF (RAISED_LG0E1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised LG0E1');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LG0E1 = FALSE;
COMMIT;

-- Test12: Tries to update the id to root.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test12: Tries to update the id to root');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T12', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 5;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test12', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LOGGER_ID = 0
  WHERE LOGGER_ID = EXPECTED_LOGGER;
IF (RAISED_LG0E1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised LG0E1');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LG0E1 = FALSE;
COMMIT;

-- Test13: Tries to update the id to some id.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test13: Tries to update the id to some id');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T13', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test13', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LOGGER_ID = EXPECTED_LOGGER + 5
  WHERE LOGGER_ID = EXPECTED_LOGGER;
IF (RAISED_LG0E1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised LG0E1');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LG0E1 = FALSE;
COMMIT;

-- Test14: Tries to update the hierarchy.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test14: Tries to update the hierarchy');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T14', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 2;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test14', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET HIERARCHY = '0,1'
  WHERE LOGGER_ID = EXPECTED_LOGGER;
IF (RAISED_LG0E1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised LG0E1');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LG0E1 = FALSE;
COMMIT;

-- Test15: Tries to update the hierarchy to null.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test15: Tries to update to null');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T15', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 4;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test15', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET HIERARCHY = NULL
  WHERE LOGGER_ID = EXPECTED_LOGGER;
IF (RAISED_LG0E1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised LG0E1');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LG0E1 = FALSE;
COMMIT;

-- Test16: Tries to update the hierarchy to empty.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test16: Tries to update to empty');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T16', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 5;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test16', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET HIERARCHY = ''
  WHERE LOGGER_ID = EXPECTED_LOGGER;
IF (RAISED_LG0E1 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised LG0E1');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E1');
END IF;
SET RAISED_LG0E1 = FALSE;
COMMIT;

-- Test17: Update the level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test17: Updates the level');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T17', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test17', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 2
  WHERE LOGGER_ID = EXPECTED_LOGGER;
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test18: Update the level to null.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test18: Updates the level to null');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T18', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 2;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test18', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = EXPECTED_LOGGER;
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;

-- Test19: Update the level to negative.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test19: Updates the level to negative');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T19', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 4;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test19', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = -2
  WHERE LOGGER_ID = EXPECTED_LOGGER;
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;

-- Test20: Update the level to inexistant.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test20: Updates the level to inexistant');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T20', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 5;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test20', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 8
  WHERE LOGGER_ID = EXPECTED_LOGGER;
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;

-- Test21: Update the level to same.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test21: Updates the level to same');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T21', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test21', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = EXPECTED_LOGGER;
SET MAX_ID = GET_MAX_ID();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;

-- Test22: Delete one logger.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test22: Delete one logger');
SET MAX_ID = GET_MAX_ID();
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 2;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test22', 0, EXPECTED_LEVEL);
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (EXPECTED_LOGGER, EXPECTED_LEVEL, EXPECTED_HIERARCHY);
SELECT COUNT(0) - 1 INTO EXPECTED_QTY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = EXPECTED_LOGGER;
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID = EXPECTED_LOGGER;
SELECT COUNT(0) INTO ACTUAL_QTY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = EXPECTED_LOGGER;
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different QTY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_QTY || ' - ' || ACTUAL_QTY);
END IF;

-- Test23: Delete ROOT.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test23: Delete ROOT');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID = 0;
IF (RAISED_LG0E2 = FALSE) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Exception not raised LG0E2');
ELSE
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (5, 'Exception raised LG0E2');
END IF;
SET RAISED_LG0E2 = FALSE;
COMMIT;

-- Test24: Delete all but root.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test24: Delete all but root');
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test24A', 0, 3);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, 3, '0,1');
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test24B', 0, 4);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, 4, '0,1');
SET EXPECTED_QTY = 0;
DELETE FROM LOGDATA.CONF_LOGGERS
  WHERE LOGGER_ID <> 0;
SELECT COUNT(0) INTO ACTUAL_QTY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID <> 0;
IF (EXPECTED_QTY <> ACTUAL_QTY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different QTY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_QTY || ' - ' || ACTUAL_QTY);
END IF;
COMMIT;

-- Test25: Updates root logger changing the default value, value from root.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test25: Updates ROOT logger changing the default value, value from root.');
SET EXPECTED_LEVEL = 4;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '2'
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SELECT LEVEL_ID INTO ACTUAL_LEVEL
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = 0;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test26: Updates root logger changing the default value, value from root.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test26: Updates ROOT logger changing the default value, value from root.');
SET EXPECTED_LEVEL = 1;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '5'
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = 0;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test27: Updates root logger changing the default value, value from default.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test26: Updates ROOT logger changing the default value, value from default.');
SET EXPECTED_LEVEL = 4;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '4'
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = 0;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
COMMIT;

-- Test28: Updates a normal logger changing the default value. Nothing happens.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test28: Updates a normal logger changing the default value');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T28', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 5;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = 1
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test28', 0, EXPECTED_LEVEL);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, 3, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '5'
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = MAX_ID;
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '4'
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test29: Updates a normal logger changing the default value, value from root.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test29: Updates a normal logger changing the default value, value from root.');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T26', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 5;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test29', 0, NULL);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, NULL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '2'
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = MAX_ID;
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test30: Updates a normal logger changing the default value, value from default.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test30: Updates a normal logger changing the default value, value from default.');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T30', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 4;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test30', 0, NULL);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, NULL, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONFIGURATION
  SET VALUE = '1'
  WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = MAX_ID;
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test31: Tests hierarchy path one level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test31: Tests hierarchy path one level');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T31', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET STRING = 'path1';
SET EXPECTED_PATH = '0,' || CHAR(MAX_ID + 1);
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_LOGGER);
SELECT HIERARCHY INTO ACTUAL_PATH
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = ACTUAL_LOGGER;
IF (EXPECTED_PATH <> ACTUAL_PATH) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test for path ' || STRING);
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || EXPECTED_PATH || ' ACTUAL ' || ACTUAL_PATH);
END IF;

-- Test32: Tests hierarchy path two levels.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test32: Tests hierarchy path two levels');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T32', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET STRING = 'path1.path2';
SET EXPECTED_PATH = '0,' || TRIM(CHAR(MAX_ID + 1))
  || ',' || TRIM(CHAR(MAX_ID + 2));
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_LOGGER);
SELECT HIERARCHY INTO ACTUAL_PATH
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = ACTUAL_LOGGER;
IF (EXPECTED_PATH <> ACTUAL_PATH) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test for path ' || STRING);
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || EXPECTED_PATH || ' ACTUAL ' || ACTUAL_PATH);
END IF;

-- Test33: Tests hierarchy path three levels.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test33: Tests hierarchy path three levels');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T33', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET STRING = 'path1.path2.path3';
SET EXPECTED_PATH = '0,' || TRIM(CHAR(MAX_ID + 1)) 
  || ',' || TRIM(CHAR(MAX_ID + 2))
  || ',' || TRIM(CHAR(MAX_ID + 3));
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_LOGGER);
SELECT HIERARCHY INTO ACTUAL_PATH
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = ACTUAL_LOGGER;
IF (EXPECTED_PATH <> ACTUAL_PATH) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test for path ' || STRING);
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || EXPECTED_PATH || ' ACTUAL ' || ACTUAL_PATH);
END IF;

-- Test34: Tests hierarchy path other two levels.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test34: Tests hierarchy other two levels');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T34', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET STRING = 'path1.path2';
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_LOGGER);
SET STRING = 'path1.path3';
SET EXPECTED_PATH = '0,' || TRIM(CHAR(MAX_ID + 1)) 
  || ',' || TRIM(CHAR(MAX_ID + 3));
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_LOGGER);
SELECT HIERARCHY INTO ACTUAL_PATH
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = ACTUAL_LOGGER;
IF (EXPECTED_PATH <> ACTUAL_PATH) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test for path ' || STRING);
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || EXPECTED_PATH || ' ACTUAL ' || ACTUAL_PATH);
END IF;

-- Test35: Tests hierarchy path other one level.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (4, 'Test35: Tests hierarchy other one level');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T35', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET STRING = 'path1';
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_LOGGER);
SET STRING = 'path2';
SET EXPECTED_PATH = '0,' || TRIM(CHAR(MAX_ID + 2));
CALL LOGGER.GET_LOGGER(STRING, ACTUAL_LOGGER);
SELECT HIERARCHY INTO ACTUAL_PATH
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = ACTUAL_LOGGER;
IF (EXPECTED_PATH <> ACTUAL_PATH) THEN
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'Error in test for path ' || STRING);
 INSERT INTO LOGDATA.LOGS (DATE, LEVEL_ID, MESSAGE) VALUES (GENERATE_UNIQUE(), 2, 'expected ' || EXPECTED_PATH || ' ACTUAL ' || ACTUAL_PATH);
END IF;

-- Test36: Updates to null conf_logger. Value from ascendancy.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test36: Updates to null conf_logger. Value from ascendancy');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T36', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test36', 0, 2);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, 4, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = MAX_ID;
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test37: Updates to not null conf_logger. Value from conf_loggers.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test36: Updates to not null conf_logger. Value from conf_loggers');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T37', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 5;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = 4
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test37', 0, NULL);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, 2, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = MAX_ID;
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test38: Updates to null conf_logger. Value from ascendancy.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test38: Updates to null conf_logger. Value from ascendancy');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
  VALUES ('T38', 0, 0);
SET MAX_ID = GET_MAX_ID();
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
SET EXPECTED_LOGGER = MAX_ID + 1;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_HIERARCHY = '0,' || CHAR(EXPECTED_LOGGER);
UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test38', 0, 2);
SET MAX_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (MAX_ID, 4, EXPECTED_HIERARCHY);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = NULL
  WHERE LOGGER_ID = MAX_ID;
SELECT LOGGER_ID, LEVEL_ID, HIERARCHY INTO ACTUAL_LOGGER, ACTUAL_LEVEL, ACTUAL_HIERARCHY
  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
  WHERE LOGGER_ID = MAX_ID;
IF (EXPECTED_LOGGER <> ACTUAL_LOGGER) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LOGGER_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LOGGER || ' - ' || ACTUAL_LOGGER);
END IF;
IF (EXPECTED_LEVEL <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different LEVEL_ID');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_LEVEL || ' - ' || ACTUAL_LEVEL);
END IF;
IF (EXPECTED_HIERARCHY <> ACTUAL_HIERARCHY) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different HIERARCHY');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_HIERARCHY || ' - ' || ACTUAL_HIERARCHY);
END IF;
COMMIT;

-- Test39: Test update Conf_loggers 1. Root update 1 -> 2
-- CL   CLE   CL  CLE
--  0 1  0 1   0 2  0 2
--  |    |     |    |
--  o    0 1   o    0 2
--  |    |     |    |
--  o    0 1   o    0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test39: Test update Conf_loggers 1. Root update 1 -> 2');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 1;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = 2;
SET EXPECTED_ROOT = 2;
SET EXPECTED_PARENT = 2;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test39p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test39s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test40: Test update Conf_loggers 2. Root update 2 -> 5
-- CL   CLE   CL  CLE
--  0 2  0 2   0 5  0 5
--  |    |     |    |
--  o    0 2   o    0 5
--  |    |     |    |
--  0 4  0 4   0 4  0 4
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test40: Test update Conf_loggers 2. Root update 2 -> 5');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 2;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = 4;
SET EXPECTED_LEVEL = 5;
SET EXPECTED_ROOT = 5;
SET EXPECTED_PARENT = 5;
SET EXPECTED_SON = 4;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test40p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test40s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test41: Test update Conf_loggers 3. Parent update 1 -> 4
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   0 4  0 4
--  |    |     |    |
--  o    0 1   o    0 4
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test41: Test update Conf_loggers 3. Parent update 1 -> 4');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = 1;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = 4;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 4;
SET EXPECTED_SON = 4;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test41p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test41s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = PARENT;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test42: Test update Conf_loggers 4. Son update 2 -> 4
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   0 1  0 1
--  |    |     |    |
--  0 2  0 2   0 4  0 4
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test42: Test update Conf_loggers 4. Son update 2 -> 4');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = 1;
SET INITIAL_SON = 2;
SET EXPECTED_LEVEL = 4;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 1;
SET EXPECTED_SON = 4;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test42p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test42s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = SON_ID;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test43: Test update Conf_loggers 5. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test43: Test update Conf_loggers 5. Root update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 1;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 3;
SET EXPECTED_SON = 3;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test43p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test43s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test44: Test update Conf_loggers 6. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
--  |    |     |    |
--  o    0 2   o    0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test44: Test update Conf_loggers 6. Root update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 1;
SET INITIAL_PARENT = 2;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 2;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test44p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test44s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test45: Test update Conf_loggers 7. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
--  |    |     |    |
--  0 4  0 4   0 4  0 4
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test45: Test update Conf_loggers 7. Root update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 1;
SET INITIAL_PARENT = 2;
SET INITIAL_SON = 4;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 2;
SET EXPECTED_SON = 4;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test45p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test45s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test46: Test update Conf_loggers 8. Root update 1 -> NULL
-- CL   CLE   CL   CLE
--  0 1  0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test46: Test update Conf_loggers 8. Root update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = 1;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = 2;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 3;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test46p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test46s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test47: Test update Conf_loggers 9. Parent update 1 -> NULL
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   o    0 3
--  |    |     |    |
--  o    0 1   o    0 3
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test47: Test update Conf_loggers 9. Parent update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = 1;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 3;
SET EXPECTED_SON = 3;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test47p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test47s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = PARENT;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test48: Test update Conf_loggers 10. Parent update 1 -> NULL
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  0 1  0 1   o    0 3
--  |    |     |    |
--  0 2  0 2   0 2  0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test48: Test update Conf_loggers 10. Parent update 1 -> NULL');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = 1;
SET INITIAL_SON = 2;
SET EXPECTED_LEVEL = NULL;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 3;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test48p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test48s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = PARENT;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test49: Test update Conf_loggers 11. Parent update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  o    0 3   0 1  0 1
--  |    |     |    |
--  o    0 3   o    0 1
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test49: Test update Conf_loggers 11. Parent update NULL -> 1');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 1;
SET EXPECTED_SON = 1;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test49p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test49s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = PARENT;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test50: Test update Conf_loggers 12. Parent update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   o    0 3
--  |    |     |    |
--  o    0 3   0 1  0 1
--  |    |     |    |
--  0 2  0 2   0 2  0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test50: Test update Conf_loggers 12. Parent update NULL -> 1');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = 2;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_ROOT = 3;
SET EXPECTED_PARENT = 1;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test50p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test50s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = PARENT;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test51: Test update Conf_loggers 13. ROOT update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   0 1  0 1
--  |    |     |    |
--  o    0 3   o    0 1
--  |    |     |    |
--  o    0 3   o    0 1
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test51: Test update Conf_loggers 13. ROOT update NULL -> 1');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_ROOT = 1;
SET EXPECTED_PARENT = 1;
SET EXPECTED_SON = 1;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test51p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test51s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test52: Test update Conf_loggers 14. ROOT update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   0 1  0 1
--  |    |     |    |
--  0 2  0 2   0 2  0 2
--  |    |     |    |
--  o    0 2   o    0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test52: Test update Conf_loggers 14. ROOT update NULL -> 1');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = 2;
SET INITIAL_SON = NULL;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_ROOT = 1;
SET EXPECTED_PARENT = 2;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test52p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test52s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test53: Test update Conf_loggers 15. ROOT update NULL -> 1
-- CL   CLE   CL   CLE
--  o    0 3   0 1  0 1
--  |    |     |    |
--  o    0 3   o    0 1
--  |    |     |    |
--  0 2  0 2   0 2  0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test53: Test update Conf_loggers 15. ROOT update NULL -> 1');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = 2;
SET EXPECTED_LEVEL = 1;
SET EXPECTED_ROOT = 1;
SET EXPECTED_PARENT = 1;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test53p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test53s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = EXPECTED_LEVEL
  WHERE LOGGER_ID = 0;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Test54: Test update Conf_loggers 16. Default update.
-- CL   CLE   CL   CLE
--  o    0 3   o    0 2
--  |    |     |    |
--  o    0 3   o    0 2
--  |    |     |    |
--  o    0 3   o    0 2
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'Test54: Test update Conf_loggers 16. Default update');
DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
UPDATE LOGDATA.CONFIGURATION SET VALUE = '3' WHERE KEY = 'defaultRootLevelId';
CALL LOGGER.REFRESH_CACHE();
SET INITIAL_ROOT = NULL;
SET INITIAL_PARENT = NULL;
SET INITIAL_SON = NULL;
SET EXPECTED_ROOT = 2;
SET EXPECTED_PARENT = 2;
SET EXPECTED_SON = 2;
UPDATE LOGDATA.CONF_LOGGERS
  SET LEVEL_ID = INITIAL_ROOT
  WHERE LOGGER_ID = 0;
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test53p', 0, INITIAL_PARENT);
SET PARENT = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (PARENT, INITIAL_PARENT, '0,' || PARENT);
INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID) VALUES
  ('test53s', PARENT, INITIAL_SON);
SET SON_ID = GET_MAX_ID();
INSERT INTO LOGDATA.CONF_LOGGERS_EFFECTIVE (LOGGER_ID, LEVEL_ID, HIERARCHY) VALUES
  (SON_ID, INITIAL_SON, '0,' || PARENT || ',' || SON_ID);
UPDATE LOGDATA.CONFIGURATION SET VALUE = '2' WHERE KEY = 'defaultRootLevelId';
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = 0;
IF (EXPECTED_ROOT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different ROOT');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_ROOT || ' - ' || ACTUAL_LEVEL);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = PARENT;
IF (EXPECTED_PARENT <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Parent');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_PARENT || ' - ' || ACTUAL_LEVEL || ' : ' || PARENT);
END IF;
SELECT LEVEL_ID INTO ACTUAL_LEVEL FROM LOGDATA.CONF_LOGGERS_EFFECTIVE WHERE LOGGER_ID = SON_ID;
IF (EXPECTED_SON <> ACTUAL_LEVEL) THEN
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, 'Different Son');
 INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (2, EXPECTED_SON || ' - ' || ACTUAL_LEVEL || ' : ' || SON_ID);
END IF;
COMMIT;

-- Cleans the environment.
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLoggersEffective: Cleaning environment');
DELETE FROM LOGDATA.CONFIGURATION;
INSERT INTO LOGDATA.CONFIGURATION (KEY, VALUE)
  VALUES ('checkHierarchy', 'false'),
         ('checkLevels', 'false'),
         ('defaultRootLevelId', '3'),
         ('internalCache', 'true'),
         ('logInternals', 'false'),
         ('secondsToRefresh', '30');
INSERT INTO LOGDATA.LOGS (LEVEL_ID, MESSAGE) VALUES (3, 'TestsConfLoggersEffective: Finished succesfully');
COMMIT;

END @

DROP FUNCTION GET_MAX_ID @

--SELECT LOGGER_ID, PARENT_ID, VARCHAR(NAME, 32) NAME, LEVEL_ID
--  FROM LOGDATA.CONF_LOGGERS
--  ORDER BY LOGGER_ID @

--SELECT LOGGER_ID, LEVEL_ID, HIERARCHY
--  FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
--  ORDER BY LOGGER_ID @

