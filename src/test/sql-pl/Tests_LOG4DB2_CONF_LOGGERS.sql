--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * Tests for the logger's insertions (conf_loggers table).
 *
 * Version: 2022-06-07 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

SET CURRENT SCHEMA LOG4DB2_CONF_LOGGERS @

SET PATH = SYSPROC, LOG4DB2_CONF_LOGGERS @

BEGIN
 DECLARE STATEMENT VARCHAR(128);
 DECLARE CONTINUE HANDLER FOR SQLSTATE '42710' BEGIN END;
 SET STATEMENT = 'CREATE SCHEMA LOG4DB2_CONF_LOGGERS';
 EXECUTE IMMEDIATE STATEMENT;
END @

-- Install

CREATE OR REPLACE FUNCTION GET_MAX_ID(
  ) RETURNS ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID
 BEGIN
  DECLARE RET ANCHOR LOGDATA.CONF_LOGGERS.LOGGER_ID;
  SET RET = (SELECT MAX(LOGGER_ID)
    FROM LOGDATA.CONF_LOGGERS);
  RETURN RET;
 END@

-- Test fixtures
CREATE OR REPLACE PROCEDURE ONE_TIME_SETUP()
 BEGIN
  CALL DB2UNIT.SET_AUTONOMOUS(FALSE);
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'false'
    WHERE KEY = 'internalCache';
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = 'false'
    WHERE KEY = 'logInternals';
 END @

CREATE OR REPLACE PROCEDURE SETUP()
 BEGIN
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('T', 0, 0);
 END @

CREATE OR REPLACE PROCEDURE TEAR_DOWN()
 BEGIN
  -- Empty
 END @

CREATE OR REPLACE PROCEDURE ONE_TIME_TEAR_DOWN()
 BEGIN
  CALL LOGGER_1RC.LOGADMIN.RESET_TABLES();
 END @

-- Tests

-- Test01: Inserts a normal logger with id.
CREATE OR REPLACE PROCEDURE TEST_01()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LOGGER = 1;
  SET EXPECTED_PARENT = 0;
  SET EXPECTED_LEVEL = 3;
  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (EXPECTED_LOGGER, 'Test01', EXPECTED_PARENT, EXPECTED_LEVEL);
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID = EXPECTED_LOGGER;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test01: Inserts a normal logger with id',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test01: Inserts a normal logger with id',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test01: Inserts a normal logger with id',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test02: Inserts a normal logger without id.
CREATE OR REPLACE PROCEDURE TEST_02()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LOGGER = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET EXPECTED_PARENT = 0;
  SET EXPECTED_LEVEL = 3;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('Test2', EXPECTED_PARENT, EXPECTED_LEVEL);
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID = GET_MAX_ID();

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test02: Inserts a normal logger without id',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test02: Inserts a normal logger without id',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test02: Inserts a normal logger without id',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test03: Tests null id
CREATE OR REPLACE PROCEDURE TEST_03()
 BEGIN
  DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
    SET RAISED_407 = TRUE;

  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (NULL, 'test3', 0, 4);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test03: Tests null id',
    RAISED_407);
 END @

-- Test04: Tests negative id
CREATE OR REPLACE PROCEDURE TEST_04()
 BEGIN
  DECLARE RAISED_LG0C3 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C3'
    SET RAISED_LG0C3 = TRUE;

  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (-1, 'test4', 0, 5);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test04: Tests negative id',
    RAISED_LG0C3);
 END @

-- Test05: Tests null name
CREATE OR REPLACE PROCEDURE TEST_05()
 BEGIN
  DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
    SET RAISED_407 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES (NULL, 0, 0);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test05: Tests null name',
    RAISED_407);
 END @

-- Test06: Tests that the parent cannot be null
CREATE OR REPLACE PROCEDURE TEST_06()
 BEGIN
  DECLARE RAISED_LG0C2 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C2'
    SET RAISED_LG0C2 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test6', NULL, 0);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test06: Tests parent cannot be null',
    RAISED_LG0C2);
 END @

-- Test07: Tests negative parent.
CREATE OR REPLACE PROCEDURE TEST_07()
 BEGIN
  DECLARE RAISED_530 BOOLEAN DEFAULT FALSE; -- Foreign key.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23503'
    SET RAISED_530 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test7', -5, 0);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test07: Tests negative parent',
    RAISED_530);
 END @

-- Test08: Tests null level
CREATE OR REPLACE PROCEDURE TEST_08()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LOGGER = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET EXPECTED_PARENT = 0;
  SET EXPECTED_LEVEL = NULL;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test8', EXPECTED_PARENT, EXPECTED_LEVEL);
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID = GET_MAX_ID();

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test08: Tests null level',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test08: Tests null level',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test08: Tests null level',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test09: Tests negative level
CREATE OR REPLACE PROCEDURE TEST_09()
 BEGIN
  DECLARE RAISED_530 BOOLEAN DEFAULT FALSE; -- Foreign key.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23503'
    SET RAISED_530 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test9', 0, -5);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test09: Tests negative level',
    RAISED_530);
 END @

-- Test10: Tests all null
CREATE OR REPLACE PROCEDURE TEST_10()
 BEGIN
  DECLARE RAISED_LG0C2 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C2'
    SET RAISED_LG0C2 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES (NULL, NULL, NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test10: Tests all null',
    RAISED_LG0C2);
 END @

-- Test11: Tests all null
CREATE OR REPLACE PROCEDURE TEST_11()
 BEGIN
  DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
    SET RAISED_407 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (NULL, NULL, NULL, NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test11: Tests all null',
    RAISED_407);
 END @

-- Test12: Tests almost all null
CREATE OR REPLACE PROCEDURE TEST_12()
 BEGIN
  DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
    SET RAISED_407 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (NULL, 'test12', NULL, NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test12: Tests lmost all null',
    RAISED_407);
 END @

-- Test13: Tests almost all null
CREATE OR REPLACE PROCEDURE TEST_13()
 BEGIN
  DECLARE RAISED_407 BOOLEAN DEFAULT FALSE; -- Null value.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23502'
    SET RAISED_407 = TRUE;

  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (NULL, 'test13', 0, NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test13: Tests almost all null',
    RAISED_407);
 END @

-- Test14: Tests that the given parent should exist
CREATE OR REPLACE PROCEDURE TEST_14()
 BEGIN
  DECLARE RAISED_530 BOOLEAN DEFAULT FALSE; -- Foreign key.
  DECLARE CONTINUE HANDLER FOR SQLSTATE '23503'
    SET RAISED_530 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test14', 50, NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test14: Tests the given parent should exist',
    RAISED_530);
 END @

-- Test15: Tests to insert root logger without parent.
CREATE OR REPLACE PROCEDURE TEST_15()
 BEGIN
  DECLARE RAISED_LG0C1 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C1'
    SET RAISED_LG0C1 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (0, 'ROOT', NULL, NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test15: Insert root logger without parent',
    RAISED_LG0C1);
 END @

-- Test16: Tests logger with id and null parent
CREATE OR REPLACE PROCEDURE TEST_16()
 BEGIN
  DECLARE RAISED_LG0C2 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C2'
    SET RAISED_LG0C2 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (5, 'test16', NULL, 0);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test16: Tests logger with id and null parent',
    RAISED_LG0C2);
 END @

-- Test17: Tests to update the logger_id.
CREATE OR REPLACE PROCEDURE TEST_17()
 BEGIN
  DECLARE RAISED_LG0C4 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C4'
    SET RAISED_LG0C4 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('Test17', 0, NULL);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LOGGER_ID = 1
    WHERE NAME = 'Test17';

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test17: Tests to update the logger_id',
    RAISED_LG0C4);
 END @

-- Test18: Tests to update the name.
CREATE OR REPLACE PROCEDURE TEST_18()
 BEGIN
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE RAISED_LG0C4 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C4'
    SET RAISED_LG0C4 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('Test18', 0, NULL);
  SET LOGGER = GET_MAX_ID();
  UPDATE LOGDATA.CONF_LOGGERS
    SET NAME = 'Test18a'
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test18: Tests to update the name',
    RAISED_LG0C4);
 END @

-- Test19: Tests to update the parent.
CREATE OR REPLACE PROCEDURE TEST_19()
 BEGIN
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE RAISED_LG0C4 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C4'
    SET RAISED_LG0C4 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('Test19', 0, NULL);
  SET LOGGER = GET_MAX_ID();
  UPDATE LOGDATA.CONF_LOGGERS
    SET PARENT_ID = 0
    WHERE LOGGER_ID = LOGGER;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test19: Tests to update the parent',
    RAISED_LG0C4);
 END @

-- Test20: Tests to update the root's parent.
CREATE OR REPLACE PROCEDURE TEST_20()
 BEGIN
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE RAISED_LG0C4 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C4'
    SET RAISED_LG0C4 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('Test20', 0, NULL);
  SET LOGGER = GET_MAX_ID();
  UPDATE LOGDATA.CONF_LOGGERS
    SET PARENT_ID = LOGGER
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test20: Tests to update the root''s parent',
    RAISED_LG0C4);
 END @

-- Test21: Tests to update the level from null.
CREATE OR REPLACE PROCEDURE TEST_21()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LOGGER = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET EXPECTED_PARENT = 0;
  SET EXPECTED_LEVEL = 2;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('Test21', EXPECTED_PARENT, NULL);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = EXPECTED_LOGGER;
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE NAME = 'Test21';

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test21: Tests to update the level from null',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test21: Tests to update the level from null',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test21: Tests to update the level from null',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test22: Tests to update the level.
CREATE OR REPLACE PROCEDURE TEST_22()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LOGGER = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET EXPECTED_PARENT = 0;
  SET EXPECTED_LEVEL = 5;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('Test22', EXPECTED_PARENT, 3);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = EXPECTED_LOGGER;
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE NAME = 'Test22';

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test22: Tests to update the level',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test22: Tests to update the level',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test22: Tests to update the level',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test23: Tests to update the level to null.
CREATE OR REPLACE PROCEDURE TEST_23()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LOGGER = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET EXPECTED_PARENT = 0;
  SET EXPECTED_LEVEL = NULL;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('Test23', EXPECTED_PARENT, 1);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = EXPECTED_LOGGER;
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE NAME = 'Test23';

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test23: Tests to update the level to null',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test23: Tests to update the level to null',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test23: Tests to update the level to null',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test24: Tests to update root's level.
CREATE OR REPLACE PROCEDURE TEST_24()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LOGGER = 0;
  SET EXPECTED_PARENT = NULL;
  SET EXPECTED_LEVEL = 2;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE NAME = 'ROOT';

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test24: 1Tests to update root s level',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test24: 2Tests to update root s level',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test24: 3Tests to update root s level',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test25: Tests to insert second root.
CREATE OR REPLACE PROCEDURE TEST_25()
 BEGIN
  DECLARE RAISED_LG0C1 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C1'
    SET RAISED_LG0C1 = TRUE;

  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (0, 'ROOT', NULL, NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test25: Tests to insert second root',
    RAISED_LG0C1);
 END @

-- Test26: Tests to insert two siblings
CREATE OR REPLACE PROCEDURE TEST_26()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL1 ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE EXPECTED_LEVEL2 ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LOGGER = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET EXPECTED_PARENT = 0;
  SET EXPECTED_LEVEL1 = 4;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test26a', EXPECTED_PARENT, EXPECTED_LEVEL1);
  SET EXPECTED_LEVEL2 = 3;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test26b', EXPECTED_PARENT, EXPECTED_LEVEL2);
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE NAME = 'test26a';

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test26: 1Tests to insert two siblings',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test26: 2Tests to insert two siblings',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test26: 3Tests to insert two siblings',
    EXPECTED_LEVEL1, ACTUAL_LEVEL);

  SET EXPECTED_LOGGER = EXPECTED_LOGGER + 1;
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE NAME = 'test26b';

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test26: 4Tests to insert two siblings',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test26: 5Tests to insert two siblings',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test26: 6Tests to insert two siblings',
    EXPECTED_LEVEL2, ACTUAL_LEVEL);
 END @

-- Test27: Tests to insert siblings
CREATE OR REPLACE PROCEDURE TEST_27()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LOGGER = GET_MAX_ID() + 3;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET EXPECTED_PARENT = 0;
  SET EXPECTED_LEVEL = 2;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test27a', 0, 5);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test27b', 0, 3);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test27c', 0, 2);
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE NAME = 'test27c';

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test27: Tests to insert siblings',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test27: Tests to insert siblings',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test27: Tests to insert siblings',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test28: Tests to insert.
CREATE OR REPLACE PROCEDURE TEST_28()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LOGGER = GET_MAX_ID() + 2;
  SET EXPECTED_PARENT = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  SET EXPECTED_LEVEL = 3;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test28a', 0, 4);
  SET ACTUAL_LOGGER = GET_MAX_ID();
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test28b', ACTUAL_LOGGER, 3);
  SELECT LOGGER_ID, PARENT_ID, LEVEL_ID
    INTO ACTUAL_LOGGER, ACTUAL_PARENT, ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE NAME = 'test28b';

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test28: Tests to insert',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test28: Tests to insert',
    EXPECTED_PARENT, ACTUAL_PARENT);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test28: Tests to insert',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test29: Tests to insert a ROOT logger with a given level.
CREATE OR REPLACE PROCEDURE TEST_29()
 BEGIN
  DECLARE RAISED_LG0C1 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C1'
    SET RAISED_LG0C1 = TRUE;

  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = 3
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (0, 'ROOT', NULL, 5);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test29: Insert a ROOT logger with a level',
    RAISED_LG0C1);
 END @

-- Test30: Tests to insert a ROOT logger with null level.
CREATE OR REPLACE PROCEDURE TEST_30()
 BEGIN
  DECLARE RAISED_LG0C1 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C1'
    SET RAISED_LG0C1 = TRUE;

  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = 3
    WHERE LOGGER_ID = 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (0, 'ROOT', NULL, NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test30: Insert a ROOT logger null level',
    RAISED_LG0C1);
 END @

-- Test31: Tests to update a ROOT logger with a given level.
CREATE OR REPLACE PROCEDURE TEST_31()
 BEGIN
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LEVEL = 4;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = 3
    WHERE LOGGER_ID = 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test31: Update a ROOT logger with a level',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test32: Tests to update a null ROOT logger with a given level.
CREATE OR REPLACE PROCEDURE TEST_32()
 BEGIN
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LEVEL = 4;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = 3
    WHERE LOGGER_ID = 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test32: Update a null ROOT with a level',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test33: Tests to update a ROOT logger with null level
CREATE OR REPLACE PROCEDURE TEST_33()
 BEGIN
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LEVEL = NULL;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = 3
    WHERE LOGGER_ID = 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test33: Update a ROOT with null level',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test34: Tests to update a null ROOT logger with null level
CREATE OR REPLACE PROCEDURE TEST_34()
 BEGIN
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LEVEL = NULL;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.REFRESH_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS_EFFECTIVE
    SET LEVEL_ID = 3
    WHERE LOGGER_ID = 0;
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test34: Update a null ROOT with null level',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
 END @

-- Test35: Tests Self parent
CREATE OR REPLACE PROCEDURE TEST_35()
 BEGIN
  DECLARE LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE RAISED_LG0C5 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C5'
    SET RAISED_LG0C5 = TRUE;

  SET LOGGER = GET_MAX_ID() + 1;
  DELETE FROM LOGDATA.CONF_LOGGERS WHERE LOGGER_ID <> 0;
  INSERT INTO LOGDATA.CONF_LOGGERS (LOGGER_ID, NAME, PARENT_ID, LEVEL_ID)
    VALUES (LOGGER, 'test35', LOGGER, NULL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test35: Tests Self parent',
    RAISED_LG0C5);
 END @

-- Test36: Tests double same child.
CREATE OR REPLACE PROCEDURE TEST_36()
 BEGIN
  DECLARE PARENT ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE RAISED_LG0C6 BOOLEAN DEFAULT FALSE;
  DECLARE CONTINUE HANDLER FOR SQLSTATE 'LG0C6'
    SET RAISED_LG0C6 = TRUE;

  SET PARENT = 0;
  SET LEVEL = NULL;
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test36', PARENT, LEVEL);
  INSERT INTO LOGDATA.CONF_LOGGERS (NAME, PARENT_ID, LEVEL_ID)
    VALUES ('test36', PARENT, LEVEL);

  CALL DB2UNIT.ASSERT_BOOLEAN_TRUE('Test36: Tests double same child',
    RAISED_LG0C6);
 END @

-- Test37: Tests to update before limit.
CREATE OR REPLACE PROCEDURE TEST_37()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LEVEL = 5;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '3'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.DEACTIVATE_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 4
    WHERE LOGGER_ID = 0;
  -- 28 niveles
  CALL LOGGER.GET_LOGGER('9.0.1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.7.8.9.0.1.2.3.4.'
    || '5.6.7', ACTUAL_LOGGER);
  SET EXPECTED_LOGGER = (SELECT MAX(LOGGER_ID)
      FROM LOGDATA.CONF_LOGGERS);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test37: 1Tests to update before limit',
    EXPECTED_LEVEL, ACTUAL_LEVEL);

  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = EXPECTED_LOGGER;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test37: 2Tests to update before limit',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test37: 3Tests to update before limit',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
 END @

-- Test38: Tests to update limit.
CREATE OR REPLACE PROCEDURE TEST_38()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LEVEL = 2;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '5'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.DEACTIVATE_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 1
    WHERE LOGGER_ID = 0;
  -- 29 niveles
  CALL LOGGER.GET_LOGGER('0.1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.'
    || '6.7.8', ACTUAL_LOGGER);
  SET EXPECTED_LOGGER = (SELECT MAX(LOGGER_ID)
      FROM LOGDATA.CONF_LOGGERS);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test38: 1Update limit',
    EXPECTED_LEVEL, ACTUAL_LEVEL);

  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = EXPECTED_LOGGER;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test38: 2Update limit',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test38: 3Update limit',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
 END @

-- Test39: Tests to update limit.
CREATE OR REPLACE PROCEDURE TEST_39()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LEVEL = 2;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '5'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.DEACTIVATE_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 1
    WHERE LOGGER_ID = 0;
  -- 30 niveles
  CALL LOGGER.GET_LOGGER('1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.'
    || '7.8.9.0', ACTUAL_LOGGER);
  SET EXPECTED_LOGGER = (SELECT MAX(LOGGER_ID)
      FROM LOGDATA.CONF_LOGGERS);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test39: 1Tests to update limit',
    EXPECTED_LEVEL, ACTUAL_LEVEL);

  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = EXPECTED_LOGGER;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test39: 2Tests to update limit',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test39: 3Tests to update limit',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
 END @

-- Test40: Tests to update after limit.
CREATE OR REPLACE PROCEDURE TEST_40()
 BEGIN
  DECLARE EXPECTED_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE EXPECTED_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;
  DECLARE ACTUAL_LOGGER ANCHOR DATA TYPE TO LOGDATA.CONF_LOGGERS.LOGGER_ID;
  DECLARE ACTUAL_LEVEL ANCHOR DATA TYPE TO LOGDATA.LEVELS.LEVEL_ID;

  SET EXPECTED_LEVEL = 3;
  UPDATE LOGDATA.CONFIGURATION
    SET VALUE = '5'
    WHERE KEY = 'defaultRootLevelId';
  CALL LOGGER.DEACTIVATE_CACHE();
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = 1
    WHERE LOGGER_ID = 0;
  -- 31 niveles
  CALL LOGGER.GET_LOGGER('2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.7.'
    || '8.9.0.1', ACTUAL_LOGGER);
  SET EXPECTED_LOGGER = (SELECT MAX(LOGGER_ID)
      FROM LOGDATA.CONF_LOGGERS);
  UPDATE LOGDATA.CONF_LOGGERS
    SET LEVEL_ID = EXPECTED_LEVEL
    WHERE LOGGER_ID = 0;
  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test40: 1Update after limit',
    EXPECTED_LEVEL, ACTUAL_LEVEL);

  SELECT LEVEL_ID INTO ACTUAL_LEVEL
    FROM LOGDATA.CONF_LOGGERS_EFFECTIVE
    WHERE LOGGER_ID = EXPECTED_LOGGER;
  SET EXPECTED_LOGGER = 0;

  CALL DB2UNIT.ASSERT_INT_EQUALS('Test40: 2Update after limit',
    EXPECTED_LEVEL, ACTUAL_LEVEL);
  CALL DB2UNIT.ASSERT_INT_EQUALS('Test40: 3Update after limit',
    EXPECTED_LOGGER, ACTUAL_LOGGER);
 END @

-- Register the suite.
CALL DB2UNIT.REGISTER_SUITE(CURRENT SCHEMA) @

