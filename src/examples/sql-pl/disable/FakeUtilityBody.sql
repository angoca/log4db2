--#SET TERMINATOR @

/*
Copyright (c) 2012 - 2014, Andres Gomez Casanova (AngocA)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

SET CURRENT SCHEMA LOGGER_1FAKE @

/**
 * Fake implementation of log4db2 to disable it without affecting the depending
 * code.
 *
 * Version: 2014-05-24 1-RC
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

ALTER MODULE LOGGER ADD
  PROCEDURE LOG (
  IN LOG_ID ANCHOR FAKELOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN LEV_ID ANCHOR FAKELOGDATA.LEVELS.LEVEL_ID,
  IN MESSAGE ANCHOR MESSAGE
  )
 P_LOG: BEGIN
 END P_LOG @

ALTER MODULE LOGGER ADD
  PROCEDURE DEBUG (
  IN LOGGER_ID ANCHOR FAKELOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN MESSAGE ANCHOR MESSAGE
  )
 BEGIN
 END @

ALTER MODULE LOGGER ADD
  PROCEDURE INFO (
  IN LOGGER_ID ANCHOR FAKELOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN MESSAGE ANCHOR MESSAGE
  )
 BEGIN
 END @

ALTER MODULE LOGGER ADD
  PROCEDURE WARN (
  IN LOGGER_ID ANCHOR FAKELOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN MESSAGE ANCHOR MESSAGE
  )
 BEGIN
 END @

ALTER MODULE LOGGER ADD
  PROCEDURE ERROR (
  IN LOGGER_ID ANCHOR FAKELOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN MESSAGE ANCHOR MESSAGE
  )
 BEGIN
 END @

ALTER MODULE LOGGER ADD
  PROCEDURE FATAL (
  IN LOGGER_ID ANCHOR FAKELOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN MESSAGE ANCHOR MESSAGE
  )
 BEGIN
 END @

ALTER MODULE LOGGER ADD
  PROCEDURE GET_LOGGER (
  IN NAME ANCHOR COMPLETE_LOGGER_NAME,
  OUT LOG_ID ANCHOR FAKELOGDATA.CONF_LOGGERS.LOGGER_ID
  )
 P_GET_LOGGER: BEGIN
  SET LOG_ID = 0;
 END P_GET_LOGGER @

ALTER MODULE LOGGER ADD
 FUNCTION GET_LOGGER_NAME (
  IN LOG_ID ANCHOR FAKELOGDATA.CONF_LOGGERS.LOGGER_ID
  ) RETURNS ANCHOR COMPLETE_LOGGER_NAME
 F_GET_LOGGER_NAME: BEGIN
  RETURN '';
 END F_GET_LOGGER_NAME @

ALTER MODULE LOGGER ADD
  PROCEDURE ACTIVATE_CACHE (
  )
 P_ACTIVATE_CACHE: BEGIN
 END P_ACTIVATE_CACHE @

ALTER MODULE LOGGER ADD
  PROCEDURE DEACTIVATE_CACHE (
  )
 P_DEACTIVATE_CACHE: BEGIN
 END P_DEACTIVATE_CACHE @

ALTER MODULE LOGGER ADD
  PROCEDURE UNLOAD_CONF (
  )
 P_UNLOAD_CONF: BEGIN
 END P_UNLOAD_CONF @

ALTER MODULE LOGGER ADD
  PROCEDURE REFRESH_CACHE (
  )
 P_REFRESH_CACHE: BEGIN
 END P_REFRESH_CACHE @

ALTER MODULE LOGGER ADD
  FUNCTION GET_VALUE (
  IN GIVEN_KEY ANCHOR FAKELOGDATA.CONFIGURATION.KEY
  ) RETURNS ANCHOR FAKELOGDATA.CONFIGURATION.VALUE
 F_GET_VALUE: BEGIN
  RETURN '';
 END F_GET_VALUE @

ALTER MODULE LOGGER ADD
  PROCEDURE MODIFY_DESCENDANTS (
  IN PARENT ANCHOR FAKELOGDATA.CONF_LOGGERS.LOGGER_ID,
  IN LEVEL ANCHOR FAKELOGDATA.LEVELS.LEVEL_ID
  )
 P_MODIFY_DESCENDANTS: BEGIN
 END P_MODIFY_DESCENDANTS @

ALTER MODULE LOGGER ADD
  FUNCTION GET_DEFINED_PARENT_LOGGER (
  IN SON_ID ANCHOR FAKELOGDATA.CONF_LOGGERS.LOGGER_ID
  ) RETURNS ANCHOR FAKELOGDATA.LEVELS.LEVEL_ID
 F_GET_DEFINED_PARENT_LOGGER: BEGIN
  RETURN 0;
 END F_GET_DEFINED_PARENT_LOGGER @

