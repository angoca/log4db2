# Copyright (c) 2013 - 2014, Andres Gomez Casanova (AngocA)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Installs all scripts of the utility.
#
# Version: 2022-05-20 1-RC
# Author: Andres Gomez Casanova (AngocA)
# Made in COLOMBIA.

# Security options.
set -euf

# Global variables
export CONTINUE=true
export ADMIN_INSTALL=false
export TEMPORAL_TABLE=false
export V9_7=false

# Installs a given script.
# It uses the continue global variable to stop the execution if an error occurs.
#
# 1) Filename of the script to execute.
installScript() {
 SCRIPT=${1}
 echo "${SCRIPT}"
 set +e
 db2 -tsf "${SCRIPT}"
 RET=${?}
 set -e
 if [ ${RET} -ne 0 ] ; then
  export CONTINUE=1
 fi
 unset SCRIPT
}

# Function that install the utility for version 10.1.
# DB2 v10.1.
v10_1() {
 local __retInstall=${1}
 echo "Installing utility for v10.1"
 cd "${LOG4DB2_SRC_MAIN_CODE_PATH}"
 if [ "${ADMIN_INSTALL}" = true ] ; then
  [ "${CONTINUE}" = true ] && installScript 00-AdminObjects.sql
 fi
 [ "${CONTINUE}" = true ] && installScript 01-Tables.sql
 [ "${CONTINUE}" = true ] && installScript 02-UtilityHeader.sql
 [ "${CONTINUE}" = true ] && installScript 03-UtilityBody.sql
 [ "${CONTINUE}" = true ] && installScript 04-Appenders.sql
 [ "${CONTINUE}" = true ] && installScript 05-LOG.sql
 [ "${CONTINUE}" = true ] && installScript 06-GET_LOGGER.sql
 [ "${CONTINUE}" = true ] && installScript 07-Trigger.sql

 [ "${CONTINUE}" = true ] && installScript 08-AdminHeader.sql
 [ "${CONTINUE}" = true ] && installScript 09-AdminBody.sql

 cd ../xml
 [ "${CONTINUE}" = true ] && installScript 10-AppendersXML.sql
 cd ../sql-pl

 # Temporal capabilities for tables.
 if [ "${TEMPORAL_TABLE}" = true ] && [ "${CONTINUE}" = true ] ; then
  echo "Create table for Time Travel"
  installScript 11-TablesTimeTravel.sql
 fi

 [ "${CONTINUE}" = true ] && installScript 12-Version.sql

 local myRetInstall=${CONTINUE}
 eval "$__retInstall"="'${myRetInstall}'"
}

# Function that install the utility for version 9.7.
# DB2 v9.7
v9_7() {
 local __retInstall=${1}
 echo "Installing utility for DB2 v9.7"
 cd "${LOG4DB2_SRC_MAIN_CODE_PATH}"
 if [ "${ADMIN_INSTALL}" = true ] ; then
  [ "${CONTINUE}" = true ] && installScript 00-AdminObjects.sql
 fi
 [ "${CONTINUE}" = true ] && installScript 01-Tables_v9_7.sql
 [ "${CONTINUE}" = true ] && installScript 02-UtilityHeader.sql
 [ "${CONTINUE}" = true ] && installScript 03-UtilityBody.sql
 [ "${CONTINUE}" = true ] && installScript 04-Appenders.sql
 [ "${CONTINUE}" = true ] && installScript 05-LOG.sql
 [ "${CONTINUE}" = true ] && installScript 06-GET_LOGGER_v9_7.sql
 [ "${CONTINUE}" = true ] && installScript 07-Trigger.sql

 [ "${CONTINUE}" = true ] && installScript 08-AdminHeader.sql
 [ "${CONTINUE}" = true ] && installScript 09-AdminBody.sql

 cd ../xml
 [ "${CONTINUE}" = true ] && installScript 10-AppendersXML.sql
 cd ../sql-pl

 [ "${CONTINUE}" = true ] && installScript 12-Version.sql

 local myRetInstall=${CONTINUE}
 eval "$__retInstall"="'${myRetInstall}'"
}

# This function checks all parameters and assign them to global variables.
checkParam() {
 local PARAM1=${1}
 local PARAM2=${2}
 local PARAM3=${3}
 if [ "${PARAM1}" = "-A" ] || [ "${PARAM2}" = "-A" ] || [ "${PARAM3}" = "-A" ] ; then
  export ADMIN_INSTALL=true
 fi
 if [ "${PARAM1}" = "-t" ] || [ "${PARAM2}" = "-t" ] || [ "${PARAM3}" = "-t" ] ; then
  export TEMPORAL_TABLE=true
 fi
 if [ "${PARAM1}" = "-v9_7" ] || [ "${PARAM2}" = "-v9_7" ] || [ "${PARAM3}" = "-v9_7" ] ; then
  export V9_7=true
 fi
}

# Main function that starts the installation.
init() {
 local __retInit=${1}
 # Initialize the environment.
 if [ -x init ] ; then
  . ./init
 else
  echo "Error: File 'init' missing or without execute permissions."
  exit 1
 fi

 echo "log4db2 is licensed under the terms of the Simplified-BSD license"

 # Check the given parameters.
 checkParam "${2}" "${3}" "${4}"

 # Checks in which DB2 version the utility will be installed.
 # DB2 v10.1 is the default version.
 if [ "${V9_7}" = true ] ; then
  v9_7 retInstall
 else
  v10_1 retInstall
 fi

 echo "Please visit the wiki to learn how to use and configure this utility"
 echo "https://github.com/angoca/log4db2/wiki"
 echo "To report an issue or provide feedback, please visit:"
 echo "https://github.com/angoca/log4db2/issues"
 echo
 if [ "${retInstall}" ] ; then
  echo "log4db2 was successfully installed"
  db2 -x "values 'Database: ' || current server"
  db2 -x "values 'Version: ' || logger.version"
  db2 -x "select 'Schema: ' || base_moduleschema from syscat.modules where moduleschema = 'SYSPUBLIC' and modulename = 'LOGGER'"
  RET_VALUE=0
 else
  echo "Check the ERROR(s) and reinstall the utility"
  echo "For more information visit check the FAQs:"
  echo "https://github.com/angoca/log4db2/wiki/FAQs"
  echo "You can also check the install guide:"
  echo "https://github.com/angoca/log4db2/wiki/Install"
  RET_VALUE=1
 fi
 unset CONTINUE

 # Clean environment.
 cd "${LOG4DB2_SRC_MAIN_SCRIPT_PATH}"
 if [ -x uninit ] ; then
  . ./uninit
 else
  echo "Error: File 'uninit' missing or without execute permissions."
  exit 2
 fi

 local  myRetInit=${RET_VALUE}
 eval "$__retInit"="'${myRetInit}'"
}

# Checks if there is already a connection established
set +e
db2 connect > /dev/null
RET=${?}
set -e
if [ ${RET} -eq 0 ] ; then
 init ret "${1:-}" "${2:-}" "${3:-}"
else
 echo "Please connect to a database before the execution of the installation."
 echo "Remember that to call the script the command is '. ./install'"
 ret=2
fi

unset CONTINUE

return ${ret}

