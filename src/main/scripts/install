# Copyright (c) 2013 - 2014, Andres Gomez Casanova (AngocA)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Installs all scripts of the utility.
#
# Version: 2014-02-14 1-RC
# Author: Andres Gomez Casanova (AngocA)
# Made in COLOMBIA.

export continue=true
export adminInstall=true
export temporalTable=false
export v9_7=false

# Installs a given script.
installScript() {
 script=${1}
 echo $script
 db2 -tsf ${script}
 if [ ${?} -ne 0 ] ; then
  export continue=false
 fi
 unset script
}

# DB2 v10.1.
v10_1() {
 local  __retInstall=$1

 echo "Installing utility for v10.1"
 if [ ${adminInstall} = true ] ; then
  [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/AdminObjects.sql
 fi
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/Tables.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/UtilityHeader.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/UtilityBody.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/Appenders.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/LOG.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/GET_LOGGER.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/Trigger.sql

 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/AdminHeader.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/AdminBody.sql

 cd ${LOG4DB2_SRC_MAIN_CODE_PATH}
 cd ..
 cd xml
 [ ${continue} = true ] && installScript AppendersXML.sql
 cd ..
 cd scripts 2> /dev/null

 # Temporal capabilities for tables.
 if [ "${temporalTable}" = "true" -a ${continue} = true ] ; then
  echo "Create table for Time Travel"
  installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/TablesTimeTravel.sql
 fi

 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/Version.sql

 echo "Please visit the wiki to learn how to use and configure this utility"
 echo "https://github.com/angoca/log4db2/wiki"
 echo "To report an issue or provide feedback, please visit:"
 echo "https://github.com/angoca/log4db2/issues"
 echo
 if [ ${continue} = true ] ; then
  echo "log4db2 was successfully installed"
  db2 -x "values 'Database: ' || current server"
  db2 -x "values 'Version: ' || logger.version"
  db2 -x "select 'Schema: ' || base_moduleschema from syscat.modules where moduleschema = 'SYSPUBLIC' and modulename = 'LOGGER'"
  retValue=0
 else
  echo "Check the error(s) and reinstall the utility"
  unset continue
  retValue=1
 fi

 local  myRetInstall=${retValue}
 eval $__retInstall="'${myRetInstall}'"
}

# DB2 v9.7
v9_7() {
 local  __retInstall=$1

 echo "Installing utility for DB2 v9.7"
 if [ ${adminInstall} = true ] ; then
  [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/AdminObjects.sql
 fi
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/Tables_v9_7.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/UtilityHeader.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/UtilityBody.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/Appenders.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/LOG.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/GET_LOGGER_v9_7.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/Trigger.sql

 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/AdminHeader.sql
 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/AdminBody.sql

 cd ${LOG4DB2_SRC_MAIN_CODE_PATH}
 cd ..
 cd xml
 [ ${continue} = true ] && installScript AppendersXML.sql
 cd ..
 cd scripts 2> /dev/null

 [ ${continue} = true ] && installScript ${LOG4DB2_SRC_MAIN_CODE_PATH}/Version.sql

 echo "Please visit the wiki to learn how to use and configure this utility"
 echo "https://github.com/angoca/log4db2/wiki"
 echo "To report an issue or provide feedback, please visit:"
 echo "https://github.com/angoca/log4db2/issues"
 echo
 if [ ${continue} = true ] ; then
  echo "log4db2 was successfully installed"
  db2 -x "values 'Database: ' || current server"
  db2 -x "values 'Version: ' || logger.version"
  db2 -x "select 'Schema: ' || base_moduleschema from syscat.modules where moduleschema = 'SYSPUBLIC' and modulename = 'LOGGER'"
  retValue=0
 else
  echo "Check the error(s) and reinstall the utility"
  unset continue
  retValue=1
 fi

 local  myRetInstall=${retValue}
 eval $__retInstall="'${myRetInstall}'"
}

checkParam() {
 param1=${1}
 param2=${2}
 param3=${3}
 if [ "${param1}" = "-A" -o "${param2}" = "-A" -o "${param3}" = "-A" ] ; then
  export adminInstall=false
 fi
 if [ "${param1}" = "-t" -o "${param2}" = "-t" -o "${param3}" = "-t" ] ; then
  export temporalTable=true
 fi
 if [ "${param1}" = "-v9.7" -o "${param2}" = "-v9.7" -o "${param3}" = "-v9.7" ] ; then
  export v9_7=true
 fi
}

init() {
 local  __retInit=$1

 if [ -x init ] ; then
  . ./init
 fi

 echo "log4db2 is licensed under the terms of the Simplified-BSD license"

 checkParam ${2} ${3} ${4}

 # Checks in which DB2 version the utility will be installed.
 # DB2 v10.1 is the default version.
 if [ "${v9_7}" = "true" ] ; then
  v9_7 retInstall
 else
  v10_1 retInstall
 fi

 if [ -x uninit ] ; then
  . ./uninit
 fi

 local  myRetInit=${retInstall}
 eval $__retInit="'${myRetInit}'"
}

# Checks if there is already a connection established
db2 connect > /dev/null
if [ ${?} -eq 0 ] ; then
 init ret ${1} ${2} ${3}
else
 echo "Please connect to a database before the execution of the installation."
 echo "Remember that to call the script the command is '. ./install'"
 ret=2
fi

unset continue

return ${ret}

