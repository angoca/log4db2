env:
  - ENV=release
  - ENV=test TESTS=seq
  - ENV=test TESTS=random

before_install:
  # Install the required libraries
  - sudo apt-get update -qq
  - sudo apt-get -y install libaio1 ksh libstdc++6-4.4-pic libstdc++6-4.4-dev libstdc++5 rpm
  - sudo apt-get -y install libpam0g:i386
  - sudo ln -s /lib/i386-linux-gnu/libpam.so.0 /lib/libpam.so.0
  - sudo apt-get install numactl

  # Retrieves and extract db2unit
  - cd
  # - wget https://github.com/angoca/db2unit/releases/download/db2unit-1-Beta/db2unit.tar.gz
  # - tar zxvf db2unit.tar.gz
  # TODO Delete next lines. They are temporal for the next db2unit release.
  - bash -c "if [ '$ENV' = 'test' ]; then git clone https://github.com/angoca/db2unit.git ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then cd db2unit ; mvn ; fi"

  # Retrieves and extracts the DB2 binaries
  - cd /tmp
  # TODO Next from IBM
  #- wget https://delivery04.dhe.ibm.com/sdfdl/v2/sar/CM/IM/04jdl/0/Xa.2/Xb.jusyLTSp44S03ZzHXWiLS32b1e23wbv6kF1tCDJAPkRERERERnijyifuPVo/Xc.CM/IM/04jdl/0/v10.5fp3a_linuxx64_server.tar.gz/Xd./Xf.LPR.D1vk/Xg.7681598/Xi.habanero/XY.habanero/XZ.JbRvkLE8TTv7J_Y3RP3k7E4qO_g/v10.5fp3a_linuxx64_server.tar.gz ; tar zxf v10.5fp3a_linuxx64_server.tar.gz ; cd server
  - wget http://204.236.237.168/db2/v10.5fp3a_linuxx64_server.tar.gz ; tar zxf v10.5fp3a_linuxx64_server.tar.gz ; cd server
  #- wget http://204.236.237.168/db2/db2wse_c.lic
  # Checks the prerequisites
  - ./db2prereqcheck -i
  # Install DB2 and creates an instance (Response file)
  - sudo ./db2setup -r /home/travis/build/angoca/log4db2/travis/db2.rsp || cat /tmp/db2setup.log
  # Changes the security
  - id
  - sudo usermod -a -G db2iadm1 $USER
  - id
  - sudo su - db2inst1 -c "db2 update dbm cfg using SYSADM_GROUP db2iadm1 ; db2stop ; db2start"
  # Creates the database
  - sudo su - db2inst1 -c "db2 create db log4db2 ; db2 connect to log4db2 ; db2 grant dbadm on database to user $USER ; db2 \"CREATE TABLESPACE SYSTOOLSPACE IN IBMCATGROUP MANAGED BY AUTOMATIC STORAGE USING STOGROUP IBMSTOGROUP EXTENTSIZE 4\""

install:
  # Install log4db2
  - cd ${TRAVIS_BUILD_DIR}
  - sh -c "if [ '$ENV' = 'release' ]; then mvn ; fi"
  - sh -c "if [ '$ENV' = 'release' ]; then . ~db2inst1/sqllib/db2profile ; db2 connect to log4db2 ; cd target/log4db2/log4db2 ; . ./install ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then . ~db2inst1/sqllib/db2profile ; db2 connect to log4db2 ; cd src/test/scripts ; . ./init-dev ; cd ../../main/scripts ; . ./install ; fi"
  # Install db2unit
  # - bash -c "if [ '$ENV' = 'test' ]; then . ~db2inst1/sqllib/db2profile ; db2 connect to log4db2 ; cd ; cd db2unit ; . ./install ; fi"
  # TODO Next line is temporal until next db2unit release
  - bash -c "if [ '$ENV' = 'test' ]; then . ~db2inst1/sqllib/db2profile ; db2 connect to log4db2 ; cd ; cd db2unit/target/db2unit/db2unit ; . ./install ; fi"
  - cd src/test/scripts ; . ./init-dev ; cd ../sql-pl
  - . ~db2inst1/sqllib/db2profile
  # TODO delete next line, it will be included in the next db2unit release
  #- bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 \"ALTER MODULE DB2UNIT_1.DB2UNIT PUBLISH PROCEDURE REGISTER_SUITE (IN SCHMA VARCHAR(128)) INSERT INTO DB2UNIT_1B.SUITES (SUITE_NAME) VALUES (SCHMA)\" ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsAppenders.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsAppendersImplementation.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsCacheConfiguration.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsCacheLevel.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsCacheLoggers.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsCascadeCallLimit.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsConfAppenders.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsConfiguration.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsConfLoggers.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsConfLoggersDelete.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsConfLoggersEffective.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsConfLoggersEffectiveCases.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsDynamicAppenders.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsFunctionGetDefinedParentLogger.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsGetLogger.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsGetLoggerName.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsHierarchy.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsLayout.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsLevels.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsLogs.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsMessages.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf TestsReferences.sql ; fi"
  - bash -c "if [ '$TESTS' = 'random' ]; then db2 connect to log4db2 ; db2 \"call db2unit.export_tests_list\"; chmod +x /tmp/listOfTestSuites ; chmod +x /tmp/returnCode ; fi"

script:
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_APPENDERS')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_APPENDERS_IMPLEMENTATION')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CACHE_CONFIGURATION')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CACHE_LEVELS')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CACHE_LOGGERS')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CASCADE_CALL_LIMIT')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONF_APPENDERS')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONFIGURATION')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONF_LOGGERS')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONF_LOGGERS_DELETE')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONF_LOGGERS_EFFECTIVE')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONF_LOGGERS_EFFECTIVE_CASES')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_DYNAMIC_APPENDERS')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_FUNCTION_GET_DEFINED_PARENT_LOGGER')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_GET_LOGGER')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_GET_LOGGER_NAME')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_HIERARCHY')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_LAYOUT')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_LEVELS')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_LOGS')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_MESSAGES')\" ; ../../../travis/procSP ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_REFERENCES')\" ; ../../../travis/procSP ; fi"

  - bash -c "if [ '$TESTS' = 'random' ]; then db2 connect to log4db2 ; . /tmp/listOfTestSuites ; /tmp/returnCode ; fi"

