env:
  - ENV=release
  - ENV=test TESTS=seq
  - ENV=test TESTS=random

before_install:
  # Parallel download
  - mvn > /dev/null &
  - sudo apt-get install aria2 -y
  - sudo ./src/test/travis/update.sh > /dev/null &

  # Retrieves and extracts the DB2 binaries
  # If it does not work, change it according to the next page:
  # http://www.ibm.com/support/fixcentral/swg/quickorder?product=ibm/Information+Management/DB2&release=10.5.*&platform=Linux+64-bit,x86_64&function=fixId&fixids=DB2-linuxx64-server_t-10.5.0.4-FP004&includeRequisites=1&includeSupersedes=0&downloadMethod=http&source=fc
  - cd /tmp ; aria2c -x 16 https://delivery04.dhe.ibm.com/sdfdl/v2/sar/CM/IM/04qts/0/Xa.2/Xb.jusyLTSp44S0MebcjasoI6LPbpsM_QcEBEZNgt8Q-JqwKLzibi57H4WjDEw/Xc.CM/IM/04qts/0/v10.5fp4_linuxx64_server_t.tar.gz/Xd./Xf.LPR.D1vk/Xg.7854666/Xi.habanero/XY.habanero/XZ.rWzSXiBlwEgh7HG3k1jO-mxdYGU/v10.5fp4_linuxx64_server_t.tar.gz ; tar zxvf v10.5fp4_linuxx64_server_t.tar.gz

  # Retrieves and extract db2unit
  # cd ; wget https://github.com/angoca/db2unit/releases/download/db2unit-1-Beta/db2unit.tar.gz ; tar zxvf db2unit.tar.gz


  # INSTALL

  # Install the required libraries
  - sudo apt-get update -qq
  - sudo apt-get install libaio1 lib32stdc++6 -y
  - sudo apt-get install -qq libpam-ldap:i386
  - sudo ln -s /lib/i386-linux-gnu/libpam.so.0 /lib/libpam.so.0

  # Checks the prerequisites
  - cd /tmp/server_t ; ./db2prereqcheck -l
  # Install DB2 and creates an instance (Response file)
  - sudo ./db2setup -r ${TRAVIS_BUILD_DIR}/src/test/travis/db2.rsp || cat /tmp/db2setup.log
  # Changes the security
  - sudo usermod -a -G db2iadm1 $USER
  - sudo chsh -s /bin/bash db2inst1
  - sudo su - db2inst1 -c "db2 update dbm cfg using SYSADM_GROUP db2iadm1 ; db2stop ; db2start"
  # Creates the database
  - sudo su - db2inst1 -c "db2 create db log4db2 ; db2 connect to log4db2 ; db2 grant dbadm on database to user $USER ; db2 \"CREATE TABLESPACE SYSTOOLSPACE IN IBMCATGROUP MANAGED BY AUTOMATIC STORAGE USING STOGROUP IBMSTOGROUP EXTENTSIZE 4\""

  # Retrieves and extract db2unit
  # TODO Delete next lines. They are temporal for the next db2unit release.
  - bash -c "if [ '$ENV' = 'test' ]; then cd ; git clone https://github.com/angoca/db2unit.git ; cd db2unit ; mvn ; fi"

install:
  # Install log4db2
  - cd ${TRAVIS_BUILD_DIR}
  - bash -c "if [ '$ENV' = 'release' ]; then mvn ; fi"
  - bash -c "if [ '$ENV' = 'release' ]; then . ~db2inst1/sqllib/db2profile ; db2 connect to log4db2 ; cd target/log4db2/log4db2 ; . ./install ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then . ~db2inst1/sqllib/db2profile ; db2 connect to log4db2 ; cd src/test/scripts ; . ./init-dev ; cd ../../main/scripts ; . ./install ; fi"

  # Install db2unit
  # - bash -c "if [ '$ENV' = 'test' ]; then . ~db2inst1/sqllib/db2profile ; db2 connect to log4db2 ; cd ; cd db2unit ; . ./install ; fi"
  # TODO Next line is temporal until next db2unit release
  - bash -c "if [ '$ENV' = 'test' ]; then . ~db2inst1/sqllib/db2profile ; db2 connect to log4db2 ; cd ; cd db2unit/target/db2unit/db2unit ; . ./install ; fi"
  - cd src/test/scripts ; . ./init-dev ; cd ../sql-pl
  - . ~db2inst1/sqllib/db2profile
  # TODO delete next line, it will be included in the next db2unit release
  #- bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 \"ALTER MODULE DB2UNIT_1.DB2UNIT PUBLISH PROCEDURE REGISTER_SUITE (IN SCHMA VARCHAR(128)) INSERT INTO DB2UNIT_1B.SUITES (SUITE_NAME) VALUES (SCHMA)\" ; fi"

  # Install the tests
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_APPENDERS.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_APPENDERS_IMPLEMENTATION.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_CACHE_CONFIGURATION.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_CACHE_LEVELS.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_CACHE_LOGGERS.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_CASCADE_CALL_LIMIT.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_CONF_APPENDERS.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_CONFIGURATION.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_CONF_LOGGERS.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_CONF_LOGGERS_DELETE.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_CONF_LOGGERS_EFFECTIVE.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_CONF_LOGGERS_EFFECTIVE_CASES.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_DYNAMIC_APPENDERS.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_FUNCTION_GET_DEFINED_PARENT_LOGGER.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_GET_LOGGER.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_GET_LOGGER_NAME.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_HIERARCHY.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_LAYOUT.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_LEVELS.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_LOGS.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_MESSAGES.sql ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to log4db2 ; db2 -tf Tests_LOG4DB2_REFERENCES.sql ; fi"
  - bash -c "if [ '$TESTS' = 'random' ]; then db2 connect to log4db2 ; db2 \"call db2unit.export_tests_list\"; sudo chmod +x /tmp/listOfTestSuites ; sudo chmod +x /tmp/returnCode ; cat /tmp/listOfTestSuites ; fi"

script:
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_APPENDERS')\"                          ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_APPENDERS_IMPLEMENTATION')\"           ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CACHE_CONFIGURATION')\"                ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CACHE_LEVELS')\"                       ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CACHE_LOGGERS')\"                      ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CASCADE_CALL_LIMIT')\"                 ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONF_APPENDERS')\"                     ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONFIGURATION')\"                      ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONF_LOGGERS')\"                       ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONF_LOGGERS_DELETE')\"                ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONF_LOGGERS_EFFECTIVE')\"             ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_CONF_LOGGERS_EFFECTIVE_CASES')\"       ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_DYNAMIC_APPENDERS')\"                  ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_FUNCTION_GET_DEFINED_PARENT_LOGGER')\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_GET_LOGGER')\"                         ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_GET_LOGGER_NAME')\"                    ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_HIERARCHY')\"                          ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_LAYOUT')\"                             ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_LEVELS')\"                             ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_LOGS')\"                               ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_MESSAGES')\"                           ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"
  - bash -c "if [ '$TESTS' = 'seq' ]; then db2 connect to log4db2 ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('LOG4DB2_REFERENCES')\"                         ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\" ; fi"

  - bash -c "if [ '$TESTS' = 'random' ]; then db2 connect to log4db2 ; . /tmp/listOfTestSuites ; /tmp/returnCode ; fi" 

after_failure:
  # If there is any error, shows the logs
  - cat /home/db2inst1/sqllib/db2dump/db2diag.log
  - db2 "call logadmin.logs"
  - db2 "select * from DB2UNIT_1.EXECUTION_REPORTS"
  - db2 "select * from LOG4DB2_APPENDERS.REPORT_TESTS"
  - db2 "select * from LOG4DB2_APPENDERS_IMPLEMENTATION.REPORT_TESTS"
  - db2 "select * from LOG4DB2_CACHE_CONFIGURATION.REPORT_TESTS"
  - db2 "select * from LOG4DB2_CACHE_LEVELS.REPORT_TESTS"
  - db2 "select * from LOG4DB2_CACHE_LOGGERS.REPORT_TESTS"
  - db2 "select * from LOG4DB2_CASCADE_CALL_LIMIT.REPORT_TESTS"
  - db2 "select * from LOG4DB2_CONF_APPENDERS.REPORT_TESTS"
  - db2 "select * from LOG4DB2_CONFIGURATION.REPORT_TESTS"
  - db2 "select * from LOG4DB2_CONF_LOGGERS.REPORT_TESTS"
  - db2 "select * from LOG4DB2_CONF_LOGGERS_DELETE.REPORT_TESTS"
  - db2 "select * from LOG4DB2_CONF_LOGGERS_EFFECTIVE.REPORT_TESTS"
  - db2 "select * from LOG4DB2_CONF_LOGGERS_EFFECTIVE_CASES.REPORT_TESTS"
  - db2 "select * from LOG4DB2_DYNAMIC_APPENDERS.REPORT_TESTS"
  - db2 "select * from LOG4DB2_FUNCTION_GET_DEFINED_PARENT_LOGGER.REPORT_TESTS"
  - db2 "select * from LOG4DB2_GET_LOGGER.REPORT_TESTS"
  - db2 "select * from LOG4DB2_GET_LOGGER_NAME.REPORT_TESTS"
  - db2 "select * from LOG4DB2_HIERARCHY.REPORT_TESTS"
  - db2 "select * from LOG4DB2_LAYOUT.REPORT_TESTS"
  - db2 "select * from LOG4DB2_LEVELS.REPORT_TESTS"
  - db2 "select * from LOG4DB2_LOGS.REPORT_TESTS"
  - db2 "select * from LOG4DB2_MESSAGES.REPORT_TESTS"
  - db2 "select * from LOG4DB2_REFERENCES.REPORT_TESTS"
  - db2 "export to /tmp/sorts.txt of del select * from db2unit_1.sorts" ; cat /tmp/sorts.txt

